{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0",
    "title": "Leostream Connection Broker RESTful API",
    "description": "Leostream Connection Broker RESTful API\n",
    "contact": {
      "name": "Leostream Corporation",
      "email": "info@leostream.com",
      "url": "https://leostream.com"
    },
    "license": {
      "name": "Leostream Software Subscription Agreement",
      "url": "https://leostream.com/leostream-software-subscription-agreement/"
    }
  },
  "servers": [
    {
      "url": "/v1",
      "description": "Version one api"
    }
  ],
  "tags": [
    {
      "name": "Centers",
      "description": "Centers RESTful API"
    },
    {
      "name": "Pools",
      "description": "Pools RESTful API"
    },
    {
      "name": "Policies",
      "description": "Policies RESTful API"
    },
    {
      "name": "Gateways",
      "description": "Gateways RESTful API"
    },
    {
      "name": "Users",
      "description": "Users RESTful API"
    },
    {
      "name": "Session",
      "description": "Session RESTful API"
    },
    {
      "name": "System",
      "description": "System RESTful API"
    },
    {
      "name": "API gets",
      "description": "RESTful API get calls"
    },
    {
      "name": "API lists",
      "description": "RESTful API list calls"
    },
    {
      "name": "API inserts",
      "description": "RESTful API insert calls"
    },
    {
      "name": "API updates",
      "description": "RESTful API update calls"
    },
    {
      "name": "API deletes",
      "description": "RESTful API delete calls"
    }
  ],
  "components": {
    "securitySchemes": {
      "apiAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "SessionLogin": {
        "$ref": "#/components/schemas/session_login"
      },
      "base": {
        "type": "object"
      },
      "exception": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/base"
          },
          {
            "type": "object",
            "required": [
              "error_status"
            ],
            "properties": {
              "error_status": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CenterPropertyFlavor": {
        "title": "the type \"flavor\" of Center object",
        "type": "string",
        "maxLength": 1,
        "description": "#### Type of server/center:\n\n- A = Active Directory\n- B = Verge\n- E = ESX 3.0 host (deprecated)\n- F = Simulated Desktops (Leostream development/testing only)\n- G = Scale Computing\n- H = Microsoft Hyper-V Service Center Virtual Machine Manager\n- I = VMware vSphere and vCenter Server\n- J = Microsoft Azure\n- K = OpenStack\n- M = HPE Moonshot System\n- P = Printer Repository\n- R = Red Hat Virtualization\n- S = Remote Desktop Services/Multi-User\n- T = PCoIP endpoints\n- U = Uncategorized/Enrolled Desktops\n- V = VirtualCenter 1.x (deprecated)\n- Y = Google Cloud\n- Z = Amazon Web Services\n"
      },
      "center_item": {
        "type": "object",
        "title": "Center",
        "description": "Center item of array\n",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/CenterPropertyFlavor"
          },
          "online": {
            "type": "integer",
            "description": "0 or 1"
          },
          "os": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "status_label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "type_label": {
            "type": "string"
          }
        }
      },
      "center_array": {
        "type": "array",
        "title": "Centers array",
        "description": "A list of Centers\n",
        "items": {
          "$ref": "#/components/schemas/center_item"
        }
      },
      "UNAUTHORIZED": {
        "type": "object",
        "title": "UNAUTHORIZED",
        "description": "##### Field 'error_status' is UNAUTHORIZED\n\nNo correct Authorization header provided.\n",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "UNAUTHORIZED"
          },
          "error_message": {
            "type": "string",
            "description": "Contains additional details about the error.\n"
          }
        }
      },
      "INSUFFICIENT_PERMISSIONS": {
        "type": "object",
        "title": "INSUFFICIENT_PERMISSIONS",
        "description": "##### Field 'error_status' is INSUFFICIENT_PERMISSIONS\n\nAccess to API is not enabled in this user's role or the role has not enough permissions.\n\nSee the 'error_message' field for details.\n",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "INSUFFICIENT_PERMISSIONS"
          },
          "error_message": {
            "type": "string",
            "description": "Contains additional details about the error.\n"
          }
        }
      },
      "ActiveDirectoryCenterBasic": {
        "type": "object",
        "title": "Center",
        "properties": {
          "center_definition": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "description": "\nThe name of the center\n"
              },
              "type": {
                "type": "string",
                "const": "active_directory",
                "description": "RESTful API type of the Center\n"
              },
              "type_label": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\ntype label of the Center (depends on the field `type` value)\n"
              },
              "remote_authentication_id": {
                "type": "integer",
                "description": "For Active Directory and Printer centers, the ID of the Remote Authentication server\n"
              },
              "ldap_subtree": {
                "type": "string",
                "maxLength": 255,
                "description": "For Active Directory centers, the subtree to load the computers from\n"
              },
              "ldap_filter": {
                "type": "string",
                "maxLength": 4095,
                "description": "An advanced filter to restrict the search by\n"
              },
              "notes": {
                "type": "string",
                "maxLength": 4095,
                "description": "\nNotes\n"
              },
              "allow_rogue": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2,
                "description": "Assign rogue users to desktops from this center:\n\n  - 0 = Do not assign rogue users\n  - 1 = Always assign rogue users\n  - 2 = Prevent rogue user login to desktop\n"
              },
              "allow_rogue_policy_id": {
                "type": "integer",
                "description": "If allow_rogue is true, use this policy for rogue users subsequently assigned to a desktop\n"
              },
              "continuous_autotag": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Apply auto-tags every time center is scanned\n"
              },
              "init_unavailable": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Initialize all newly-discovered VMs to \"unavailable\"\n"
              },
              "offer_vms": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Offer desktops from this center\n"
              },
              "poll_interval": {
                "type": "integer",
                "description": "The number of minutes to wait between polls of the center. 0 means don't poll the center\n"
              },
              "poll_power_state_interval": {
                "type": "integer",
                "description": "The number of minutes to wait between scans to determine power states of the\ndesktops in this center. 0 means no scan.\n"
              },
              "short_hostname_lookup": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating whether to look up resources by the short hostname only\n"
              }
            }
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "maxLength": 100,
            "description": "\nThe UUID of the center\n"
          },
          "product_id": {
            "type": "integer",
            "readOnly": true,
            "description": "The agent type:\n\n  - 1 - Windows Host Agent\n  - 3 - Linux Host Agent (deprecated)\n  - 10 = Leostream Citrix connector\n  - 14 - Leostream Host Agent (Java)\n"
          },
          "needs_upgrade": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "Does the agent need to be upgraded\n"
          },
          "active": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if this is an active center\n"
          }
        }
      },
      "ActiveDirectoryCenterAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActiveDirectoryCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for insert\n",
            "required": [
              "center_definition"
            ],
            "properties": {
              "center_definition": {
                "type": "object",
                "required": [
                  "name",
                  "remote_authentication_id"
                ]
              }
            }
          }
        ]
      },
      "extra_fields": {
        "type": "array",
        "title": "List of extra fields",
        "description": "An array of fields not allowed by this method.\nThese fields are not included to the saved input data.\n",
        "items": {
          "type": "string",
          "description": "A field name.\n"
        }
      },
      "RespStandard": {
        "title": "Standard response",
        "description": "Contains a field 'stored_data', which contains an object in JSON representation, similar to return of the `get` method.\n\nOptionally fields 'warnings' and 'extra_fields'.\n",
        "type": "object",
        "required": [
          "stored_data"
        ],
        "properties": {
          "extra_fields": {
            "$ref": "#/components/schemas/extra_fields",
            "items": {
              "type": "string"
            }
          },
          "warnings": {
            "type": "object",
            "description": "Contains a set of warnings, each containing a hash (associative array) of warnings that occurred.\nEach item should is a pair key-value pair, where the key is the name of a warning or of\na wrong input field and the value is a text description of the warning.\n"
          },
          "stored_data": {
            "type": "object"
          }
        }
      },
      "BooleanOrInt0To1": {
        "anyOf": [
          {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          {
            "type": "boolean"
          }
        ]
      },
      "CenterBasicAll": {
        "properties": {
          "active": {
            "description": "A boolean field indicating if this is an active center\n",
            "maximum": 1,
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          },
          "center_definition": {
            "properties": {
              "_custom_code": {
                "description": "AWS center custom region\n",
                "maxLength": 100,
                "type": "string"
              },
              "_custom_endpoint": {
                "description": "AWS center custom endpoint URL\n",
                "maxLength": 100,
                "type": "string"
              },
              "_custom_name": {
                "description": "AWS center custom region name\n",
                "maxLength": 100,
                "type": "string"
              },
              "allow_rogue": {
                "description": "Assign rogue users to desktops from this center:\n\n  - 0 = Do not assign rogue users\n  - 1 = Always assign rogue users\n  - 2 = Prevent rogue user login to desktop\n",
                "maximum": 2,
                "minimum": 0,
                "type": "integer"
              },
              "allow_rogue_policy_id": {
                "description": "If allow_rogue is true, use this policy for rogue users subsequently assigned to a desktop\n",
                "type": "integer"
              },
              "attached_role": {
                "description": "For Amazon centers, name of an attached IAM role\n",
                "maxLength": 255,
                "type": "string"
              },
              "continuous_autotag": {
                "description": "Apply auto-tags every time center is scanned\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "enable_syslog": {
                "description": "A boolean field indicating if PCoIP devices should be automatically configured to send syslog events to this Broker cluster\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "enable_syslog_relay": {
                "description": "A boolean field indicating whether syslog events should be forwarded to remove syslog server\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "filter_by_tag_rules": {
                "description": "Filter desktops based on server tag rules matching desktop tags\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "flavor": {
                "$ref": "#/components/schemas/CenterPropertyFlavor"
              },
              "gateway_id": {
                "description": "The Gateway to use to forward API calls to this center\n",
                "type": "integer"
              },
              "init_unavailable": {
                "description": "Initialize all newly-discovered VMs to \"unavailable\"\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "ip": {
                "description": "The IP address of the center, or the Connection Broker if this is a PCoIP (T) server\n",
                "maxLength": 255,
                "type": "string"
              },
              "ldap_filter": {
                "description": "An advanced filter to restrict the search by\n",
                "maxLength": 4095,
                "type": "string"
              },
              "ldap_subtree": {
                "description": "For Active Directory centers, the subtree to load the computers from\n",
                "maxLength": 255,
                "type": "string"
              },
              "max_remote_desktop_sessions": {
                "description": "For Remote Desktop Services/Multi-User centers, the most concurrent sessions this center supports\n",
                "type": "integer"
              },
              "name": {
                "description": "\nThe name of the center\n",
                "maxLength": 100,
                "minLength": 1,
                "type": "string"
              },
              "new_as_deletable": {
                "description": "Mark newly-discovered desktops as \"deletable\"\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "notes": {
                "description": "\nNotes\n",
                "maxLength": 4095,
                "type": "string"
              },
              "offer_vms": {
                "description": "Offer desktops from this center\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "pcoip_ssh_password": {
                "description": "For PCoIP Devices centers, the default SSH password\n",
                "maxLength": 4095,
                "type": "string"
              },
              "poll_interval": {
                "description": "The number of minutes to wait between polls of the center. 0 means don't poll the center\n",
                "type": "integer"
              },
              "poll_power_state_interval": {
                "description": "The number of minutes to wait between scans to determine power states of the\ndesktops in this center. 0 means no scan.\n",
                "type": "integer"
              },
              "proxy_address": {
                "description": "The proxy address to use for Amazon\n",
                "maxLength": 255,
                "type": "string"
              },
              "remote_authentication_id": {
                "description": "For Active Directory and Printer centers, the ID of the Remote Authentication server\n",
                "type": "integer"
              },
              "rpc_port": {
                "description": "\nThe RPC port\n",
                "type": "integer"
              },
              "short_hostname_lookup": {
                "description": "A boolean field indicating whether to look up resources by the short hostname only\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "syslog_forward_to_addr": {
                "description": "The host name or IP address of the remote host to forward syslog entries to\n",
                "maxLength": 255,
                "type": "string"
              },
              "tag_rules": {
                "description": "List of tag rules\n",
                "items": {
                  "properties": {
                    "condition_type": {
                      "description": "- eq - is equal to\n- ne - is not equal to\n- ct - contains\n- nc - does not contain\n- bw - begins with\n- ew - ends with\n- ig - any tag value.  If condition_type is 'ig', tag_text value will be ignored\n",
                      "enum": [
                        "eq",
                        "ne",
                        "ct",
                        "nc",
                        "bw",
                        "ew",
                        "ig"
                      ],
                      "type": "string"
                    },
                    "tag_key": {
                      "description": "Tag key\n",
                      "maxLength": 200,
                      "type": "string"
                    },
                    "tag_text": {
                      "description": "Tag value text, complete or partial\n",
                      "maxLength": 200,
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "tag_rules_join": {
                "description": "Tag rules join type\n- O for 'Or'\n- A for 'And'\n",
                "enum": [
                  "O",
                  "A"
                ],
                "type": "string"
              },
              "type": {
                "description": "RESTful API type of the Center\n",
                "enum": [
                  "amazon",
                  "active_directory",
                  "uncategorized",
                  "vcenter",
                  "google",
                  "rhev",
                  "openstack",
                  "azure",
                  "scale",
                  "hyper-v_scvmm",
                  "terminal_server",
                  "moonshot",
                  "workspaces",
                  "verge",
                  "nutanix",
                  "kubevirt"
                ],
                "type": "string"
              },
              "type_label": {
                "description": "_Read-only field, cannot be used in update methods._\n\ntype label of the Center (depends on the field `type` value)\n",
                "readOnly": true,
                "type": "string"
              },
              "vc_auth_method": {
                "description": "Authorization method:\nFor Amazon centers, either Access Key or any attached IAM role\n",
                "enum": [
                  "access_key",
                  "attached_role",
                  ""
                ],
                "type": "string"
              },
              "vc_custom_fields": {
                "description": "The vCenter custom attributes on this center as a JSON data structure\n",
                "type": "array"
              },
              "vc_datacenter": {
                "description": "- For Amazon centers, the Region\n- For Azure centers, the Region\n- For Google centers, the Region\n- For vCenter centers, datacenter to use (get all VMs if blank)\n- For OpenStack centers, the Project\n",
                "maxLength": 255,
                "type": "string"
              },
              "vc_domain": {
                "description": "- For Azure centers, the Tenant ID\n- For OpenStack centers, the User Domain\n- For ScaleComputing centers, the Tag name used to identify templates/images\n- For Nutanix centers, the Prism Central IP address\n",
                "maxLength": 255,
                "type": "string"
              },
              "vc_name": {
                "description": "- For vCenter and OpenStack centers, the login user name\n- For Amazon centers, the Access Key ID\n- For Google centers, the Project ID\n- For PCoIP Devices centers, the default SSH username for Software Clients\n",
                "maxLength": 255,
                "type": "string"
              },
              "vc_password": {
                "description": "- For Amazon centers, the Secret Access Key\n- For Azure centers, the Secret Key Value\n- For KubeVirt centers, the API Token\n- For PCoIP Devices centers, the default AWI password\n- For vCenter and OpenStack centers, the login password\n",
                "maxLength": 4095,
                "type": "string"
              },
              "vc_project_domain": {
                "description": "For OpenStack centers, the Project Domain\n",
                "maxLength": 200,
                "type": "string"
              },
              "vc_url": {
                "description": "- For vCenter and RHEV_M centers, the URL\n- For OpenStack centers, the Auth URL\n- For Nutanix centers, the Prism Element IP address\n",
                "maxLength": 255,
                "type": "string"
              },
              "vc_version": {
                "description": "- For vCenter centers, the UpdateSet.version string returned from vCenter during an update\n- For OpenStack centers, the Region\n",
                "maxLength": 255,
                "type": "string"
              },
              "vm_id": {
                "description": "For Remote Desktop Services/Multi-User centers, the vm ID of the master vm\n",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "wait_inst_status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BooleanOrInt0To1"
                  },
                  {
                    "description": "AWS center flag indicating we should wait for valid Instance Status\n"
                  }
                ]
              },
              "wait_sys_status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BooleanOrInt0To1"
                  },
                  {
                    "description": "AWS center flag indicating we should wait for valid System Status\n"
                  }
                ]
              }
            },
            "type": "object"
          },
          "needs_upgrade": {
            "description": "Does the agent need to be upgraded\n",
            "maximum": 1,
            "minimum": 0,
            "readOnly": true,
            "type": "integer"
          },
          "product_id": {
            "description": "The agent type:\n\n  - 1 - Windows Host Agent\n  - 3 - Linux Host Agent (deprecated)\n  - 10 = Leostream Citrix connector\n  - 14 - Leostream Host Agent (Java)\n",
            "readOnly": true,
            "type": "integer"
          },
          "uuid": {
            "description": "\nThe UUID of the center\n",
            "maxLength": 100,
            "readOnly": true,
            "type": "string"
          }
        },
        "title": "Center",
        "type": "object"
      },
      "vc_cluster_item": {
        "type": "object",
        "title": "VC cluster",
        "description": "VC resource pool item of array\n",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "Name of this cluster\n"
          },
          "vc_moref": {
            "type": "string",
            "description": "VC ID (e.g. \"domain-45\") of this cluster\n"
          }
        }
      },
      "VMwareESXServerBasic": {
        "type": "object",
        "title": "ESX Server",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the ESX Server\n"
          },
          "max_vms": {
            "type": "integer",
            "minimum": 0,
            "maximum": 512,
            "description": "Running Machine Thresholds for vMotion.\nEither maximum number of running VMs, or 0 for unlimited\n"
          }
        }
      },
      "VMwareESXServerUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VMwareESXServerBasic"
          },
          {
            "type": "object",
            "description": "ESX Server object data\n",
            "required": [],
            "properties": {
              "vc_moref": {
                "type": "string",
                "description": "VC ID (e.g. \"host-3061\") of this ESX Server\n"
              }
            }
          }
        ]
      },
      "VMwareESXServerFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VMwareESXServerUpdate"
          },
          {
            "type": "object",
            "description": "ESX Server object data\n",
            "required": [
              "id",
              "name",
              "max_vms",
              "vc_moref"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "vc_datastore_item": {
        "type": "object",
        "title": "VC datastore",
        "description": "VC datastore item of array\n",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "Name of datastore as it appears in VC\n"
          },
          "label": {
            "type": "string",
            "description": "Label of datastore as combined datacenter name with the datastore name\nand human readable \"free_space\" and \"capacity\" data\n"
          },
          "capability": {
            "type": "string",
            "description": "CSV list of this datastore's storage capabilities.\nOptions include:\n  - thick: always present for VMFS2 and higher, storage is preallocated\n  - thin: VMFS3 and higher only, storage can be allocated \"lazily\"\n"
          },
          "capacity": {
            "type": "string",
            "description": "The size in bytes of this datastore\n"
          },
          "flavor": {
            "type": "string",
            "description": "The kind of datastore this is as reported by VC\n"
          },
          "free_space": {
            "type": "string",
            "description": "The size in bytes of free space available on this datastore\n"
          },
          "hosts": {
            "type": "string",
            "description": "A CSV list of host MoRefs that this datastore is attached to\n"
          }
        }
      },
      "vc_folder_item": {
        "type": "object",
        "title": "VC folder",
        "description": "VC folder item of array with children\n",
        "properties": {
          "level": {
            "type": "integer",
            "description": "Level in the tree starting from 0\n"
          },
          "name": {
            "type": "string",
            "description": "Name of this folder\n"
          },
          "vc_moref": {
            "type": "string",
            "description": "VC ID (e.g. \"group-v25\") of this folder\n"
          },
          "children": {
            "type": "array",
            "description": "Array of children if any\n"
          }
        }
      },
      "vc_resource_pool_item": {
        "type": "object",
        "title": "VC resource pool",
        "description": "VC resource pool item of array\n",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "vc_spec_file_item": {
        "type": "object",
        "title": "VC customization spec file",
        "description": "VC customization spec file item of array\n",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CenterFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CenterBasicAll"
          },
          {
            "type": "object",
            "description": "Center full object\n",
            "required": [
              "center_definition"
            ]
          }
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID. Automatically assigned by the system.\n"
          },
          "uuid": {
            "type": "string",
            "maxLength": 100,
            "description": "\nThe UUID of the center\n"
          },
          "online": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "\nIs the center online\n"
          },
          "status": {
            "type": "integer",
            "description": "The status of the center\n\n- 1 = Online\n- 2 = Offline\n- 3 = Needs Upgrade\n- 4 = Disk Full\n- 5 = Scanning\n"
          },
          "status_label": {
            "type": "string",
            "readOnly": true,
            "description": "_Read-only field, cannot be used in update methods._\n\nstatus label of the Center (depends on the field `status` value)\n"
          },
          "images": {
            "type": "array",
            "description": "Center images/templates"
          },
          "center_info": {
            "type": "object",
            "properties": {
              "agent_instance_uuid": {
                "type": "string",
                "maxLength": 100,
                "description": "The Leostream Agent's instance UUID if it is present\n"
              },
              "agent_token": {
                "type": "string",
                "maxLength": 100,
                "description": "The Leostream Agent's communication identifier\n"
              },
              "agent_uuid": {
                "type": "string",
                "maxLength": 100,
                "description": "The Agent UUID on the center if it is present\n"
              },
              "agent_version": {
                "type": "string",
                "maxLength": 100,
                "description": "\nThe agent version\n"
              },
              "os": {
                "type": "string",
                "maxLength": 100,
                "description": "\nThe OS of the center\n"
              },
              "os_version": {
                "type": "string",
                "maxLength": 100,
                "description": "\nThe OS version\n"
              },
              "ldap_attributes": {
                "type": "array",
                "description": "AD/LDAP center's attributes\n"
              },
              "ldap_attributes_updated": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\nwhen LDAP attributes were updated\n"
              },
              "aws_sizes": {
                "type": "array",
                "description": "AWS Instance Types\n"
              },
              "aws_sub_nets": {
                "type": "array",
                "description": "AWS subnets\n"
              },
              "aws_sec_groups": {
                "type": "array",
                "description": "AWS security groups\n"
              },
              "api_version": {
                "type": "string",
                "description": "VC API version\n"
              },
              "vc_clusters": {
                "type": "array",
                "description": "vCenter clusters\n",
                "items": {
                  "$ref": "#/components/schemas/vc_cluster_item"
                }
              },
              "vc_hosts": {
                "type": "array",
                "description": "vCenter ESX Servers (VC hosts)\n",
                "items": {
                  "$ref": "#/components/schemas/VMwareESXServerFull"
                }
              },
              "vc_datastores": {
                "type": "array",
                "description": "vCenter datastores\n",
                "items": {
                  "$ref": "#/components/schemas/vc_datastore_item"
                }
              },
              "vc_folders": {
                "type": "array",
                "description": "vCenter folders\n",
                "items": {
                  "$ref": "#/components/schemas/vc_folder_item"
                }
              },
              "vc_resource_pools": {
                "type": "array",
                "description": "vCenter resource pools\n",
                "items": {
                  "$ref": "#/components/schemas/vc_resource_pool_item"
                }
              },
              "vc_spec_files": {
                "type": "array",
                "description": "vCenter customization spec files\n",
                "items": {
                  "$ref": "#/components/schemas/vc_spec_file_item"
                }
              }
            }
          },
          "product_id": {
            "type": "integer",
            "description": "The agent type:\n\n  - 1 - Windows Host Agent\n  - 3 - Linux Host Agent (deprecated)\n  - 10 = Leostream Citrix connector\n  - 14 - Leostream Host Agent (Java)\n"
          },
          "needs_upgrade": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "Does the agent need to be upgraded\n"
          },
          "active": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if this is an active center\n"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "\nTime the record was created\n"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time the record was last updated or modified\n"
          }
        }
      },
      "RespCenterCreated": {
        "title": "stored Center response",
        "allOf": [
          {
            "$ref": "#/components/schemas/RespStandard"
          },
          {
            "type": "object",
            "properties": {
              "stored_data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CenterFull"
                  },
                  {
                    "type": "object",
                    "description": "Center object in JSON representation,\nsimilar to the response of the `centers.get` method.\n"
                  }
                ]
              }
            }
          }
        ]
      },
      "ErrorShortBasicModel": {
        "type": "object",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_message": {
            "type": "string",
            "description": "Contains additional details about the error.\n"
          }
        }
      },
      "missing_fields": {
        "type": "array",
        "title": "List of missing fields",
        "description": "Array of missing required parameters",
        "items": {
          "type": "string",
          "description": "A field name.\n"
        }
      },
      "ErrorsArrayItem": {
        "description": "Error item of array\n",
        "type": "object",
        "required": [
          "path",
          "message"
        ],
        "properties": {
          "path": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorsArray": {
        "type": "array",
        "description": "A list of errors, each item should contain two fields:\n\n- 'path'      - indicates where the error is located,\n- 'message'   - error description.\n",
        "items": {
          "$ref": "#/components/schemas/ErrorsArrayItem"
        }
      },
      "ErrorBasicModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorShortBasicModel"
          },
          {
            "type": "object",
            "properties": {
              "missing_fields": {
                "$ref": "#/components/schemas/missing_fields"
              },
              "errors": {
                "$ref": "#/components/schemas/ErrorsArray"
              }
            }
          }
        ]
      },
      "BAD_DATA": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBasicModel"
          },
          {
            "type": "object",
            "title": "BAD_DATA",
            "description": "##### Field 'error_status' is BAD_DATA\n\nTypically indicates an invalid body JSON. See the 'error_message' field for additional details.\nIf the request is missing required parameters, the 'missing_fields' field contains a list of missing parameters.\n\nThe BAD_DATA error is also raised if the body JSON is valid but sets a value for the 'id' field.\n\nNote that this behavior (using low-level errors in the 'items') may be changed in future releases of the API.\n",
            "properties": {
              "error_status": {
                "type": "string",
                "const": "BAD_DATA"
              },
              "missing_fields": {
                "$ref": "#/components/schemas/missing_fields"
              }
            }
          }
        ]
      },
      "error_item": {
        "type": "object",
        "title": "Error item",
        "description": "Data related to a field that did not pass validation",
        "properties": {
          "error_field": {
            "type": "string",
            "description": "Contains a target database field (not input JSON field)\n"
          },
          "error_text": {
            "type": "string",
            "description": "Description of the error.\n"
          }
        }
      },
      "errors": {
        "type": "array",
        "title": "List of errors",
        "description": "Array of fields that did not pass validation",
        "items": {
          "$ref": "#/components/schemas/error_item"
        }
      },
      "Conflict": {
        "type": "object",
        "title": "CONFLICT",
        "description": "##### Field 'error_status' is CONFLICT\n\nAn error occurred during object creation. See the 'error_message' field for more details.\n",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "CONFLICT"
          },
          "error_message": {
            "type": "string",
            "description": "Contains additional details about the error.\n"
          },
          "missing_fields": {
            "$ref": "#/components/schemas/missing_fields"
          },
          "errors": {
            "$ref": "#/components/schemas/errors"
          }
        }
      },
      "items": {
        "type": "array",
        "title": "List of items",
        "description": "List of fields responsible for the error\n",
        "items": {
          "type": "string",
          "description": "A field name.\n"
        }
      },
      "NotUnique": {
        "type": "object",
        "title": "NOT_UNIQUE",
        "description": "##### Field 'error_status' is NOT_UNIQUE\n\nBody contains values that should be unique for some fields.\nThe list of these fields are listed in the 'items' array.\n",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "NOT_UNIQUE"
          },
          "error_message": {
            "type": "string",
            "description": "Contains additional details about the error.\n"
          },
          "items": {
            "$ref": "#/components/schemas/items"
          },
          "missing_fields": {
            "$ref": "#/components/schemas/missing_fields"
          },
          "errors": {
            "$ref": "#/components/schemas/errors"
          }
        }
      },
      "AWSCenterBasic": {
        "type": "object",
        "title": "Center",
        "properties": {
          "center_definition": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "description": "\nThe name of the center\n"
              },
              "type": {
                "type": "string",
                "const": "amazon",
                "description": "RESTful API type of the Center\n"
              },
              "type_label": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\ntype label of the Center (depends on the field `type` value)\n"
              },
              "vc_datacenter": {
                "type": "string",
                "maxLength": 255,
                "description": "AWS region\nor a predefined value `_custom` if custom region is used\n"
              },
              "_custom_code": {
                "type": "string",
                "maxLength": 100,
                "description": "The exact code for the AWS custom region\n"
              },
              "_custom_endpoint": {
                "type": "string",
                "maxLength": 100,
                "description": "The AWS endpoint URL for this custom region.\nThe Connection Broker uses this endpoint to call the EC2 API\nto manage the instances in this region.\nAWS endpoint URLs use the general syntax\n\"protocol://service-code.region-code.amazonaws.com\".\nEnsure that you specify the URL using the \"https\" protocol.\nFor example, the endpoint URL for the US East (Ohio) Region\nis https://ec2.us-east-2.amazonaws.com.\n"
              },
              "_custom_name": {
                "type": "string",
                "maxLength": 100,
                "description": "A user friendly name for the AWS custom region\n"
              },
              "vc_auth_method": {
                "type": "string",
                "enum": [
                  "access_key",
                  "attached_role"
                ],
                "description": "Authorization method:\nFor Amazon centers, either Access Key or any attached IAM role\n"
              },
              "attached_role": {
                "type": "string",
                "maxLength": 255,
                "description": "The name of an attached IAM role\n\n_Required if `vc_auth_method` is \"attached_role\"_\n"
              },
              "vc_name": {
                "type": "string",
                "maxLength": 255,
                "description": "The Access Key ID for a user with permission to access EC2\n\n_Required if `vc_auth_method` is \"access_key\"_\n"
              },
              "vc_password": {
                "type": "string",
                "maxLength": 4095,
                "description": "The Secret Access Key for this user\n\n_Required if `vc_auth_method` is \"access_key\"_\n"
              },
              "proxy_address": {
                "type": "string",
                "maxLength": 255,
                "description": "The proxy address to use for Amazon\n"
              },
              "notes": {
                "type": "string",
                "maxLength": 4095,
                "description": "\nNotes\n"
              },
              "allow_rogue": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2,
                "description": "Assign rogue users to desktops from this center:\n\n  - 0 = Do not assign rogue users\n  - 1 = Always assign rogue users\n  - 2 = Prevent rogue user login to desktop\n"
              },
              "allow_rogue_policy_id": {
                "type": "integer",
                "description": "If allow_rogue is true, use this policy for rogue users subsequently assigned to a desktop\n"
              },
              "continuous_autotag": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Apply auto-tags every time center is scanned\n"
              },
              "init_unavailable": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Initialize all newly-discovered VMs to \"unavailable\"\n"
              },
              "new_as_deletable": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Mark newly-discovered desktops as \"deletable\"\n"
              },
              "filter_by_tag_rules": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Filter desktops based on server tag rules matching desktop tags\n"
              },
              "tag_rules_join": {
                "type": "string",
                "enum": [
                  "O",
                  "A"
                ],
                "description": "Tag rules join type\n- O for 'Or'\n- A for 'And'\n"
              },
              "tag_rules": {
                "type": "array",
                "description": "List of tag rules\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "tag_key": {
                      "type": "string",
                      "maxLength": 200,
                      "description": "Tag key\n"
                    },
                    "condition_type": {
                      "type": "string",
                      "enum": [
                        "eq",
                        "ne",
                        "ct",
                        "nc",
                        "bw",
                        "ew",
                        "ig"
                      ],
                      "description": "- eq - is equal to\n- ne - is not equal to\n- ct - contains\n- nc - does not contain\n- bw - begins with\n- ew - ends with\n- ig - any tag value.  If condition_type is 'ig', tag_text value will be ignored\n"
                    },
                    "tag_text": {
                      "type": "string",
                      "maxLength": 200,
                      "description": "Tag value text, complete or partial\n"
                    }
                  }
                }
              },
              "offer_vms": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Offer desktops from this center\n"
              },
              "poll_interval": {
                "type": "integer",
                "description": "The number of minutes to wait between polls of the center. 0 means don't poll the center\n"
              },
              "wait_inst_status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BooleanOrInt0To1"
                  },
                  {
                    "description": "AWS center flag indicating we should wait for valid Instance Status\n"
                  }
                ]
              },
              "wait_sys_status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BooleanOrInt0To1"
                  },
                  {
                    "description": "AWS center flag indicating we should wait for valid System Status\n"
                  }
                ]
              }
            }
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "maxLength": 100,
            "description": "\nThe UUID of the center\n"
          },
          "product_id": {
            "type": "integer",
            "readOnly": true,
            "description": "The agent type:\n\n  - 1 - Windows Host Agent\n  - 3 - Linux Host Agent (deprecated)\n  - 10 = Leostream Citrix connector\n  - 14 - Leostream Host Agent (Java)\n"
          },
          "needs_upgrade": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "Does the agent need to be upgraded\n"
          },
          "active": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if this is an active center\n"
          }
        }
      },
      "AWSCenterAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AWSCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for insert\n",
            "required": [
              "center_definition"
            ],
            "properties": {
              "center_definition": {
                "type": "object",
                "required": [
                  "name",
                  "vc_datacenter",
                  "vc_auth_method"
                ]
              }
            }
          }
        ]
      },
      "UncategorizedCenterBasic": {
        "type": "object",
        "title": "Center",
        "properties": {
          "center_definition": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "description": "\nThe name of the center\n"
              },
              "type": {
                "type": "string",
                "const": "uncategorized",
                "description": "RESTful API type of the Center\n"
              },
              "type_label": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\ntype label of the Center (depends on the field `type` value)\n"
              },
              "allow_rogue": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2,
                "description": "Assign rogue users to desktops from this center:\n\n  - 0 = Do not assign rogue users\n  - 1 = Always assign rogue users\n  - 2 = Prevent rogue user login to desktop\n"
              },
              "allow_rogue_policy_id": {
                "type": "integer",
                "description": "If allow_rogue is true, use this policy for rogue users subsequently assigned to a desktop\n"
              },
              "continuous_autotag": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Apply auto-tags every time center is scanned\n"
              },
              "init_unavailable": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Initialize all newly-discovered VMs to \"unavailable\"\n"
              },
              "notes": {
                "type": "string",
                "maxLength": 4095,
                "description": "\nNotes\n"
              },
              "offer_vms": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Offer desktops from this center\n"
              },
              "poll_interval": {
                "type": "integer",
                "description": "The number of minutes to wait between polls of the center. 0 means don't poll the center\n"
              },
              "poll_power_state_interval": {
                "type": "integer",
                "description": "The number of minutes to wait between scans to determine power states of the\ndesktops in this center. 0 means no scan.\n"
              },
              "short_hostname_lookup": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating whether to look up resources by the short hostname only\n"
              }
            }
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "maxLength": 100,
            "description": "\nThe UUID of the center\n"
          },
          "product_id": {
            "type": "integer",
            "readOnly": true,
            "description": "The agent type:\n\n  - 1 - Windows Host Agent\n  - 3 - Linux Host Agent (deprecated)\n  - 10 = Leostream Citrix connector\n  - 14 - Leostream Host Agent (Java)\n"
          },
          "needs_upgrade": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "Does the agent need to be upgraded\n"
          },
          "active": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if this is an active center\n"
          }
        }
      },
      "UncategorizedCenterAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UncategorizedCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for insert\n",
            "required": [
              "center_definition"
            ],
            "properties": {
              "center_definition": {
                "type": "object",
                "required": [
                  "name"
                ]
              }
            }
          }
        ]
      },
      "VMwareCenterBasic": {
        "type": "object",
        "title": "Center",
        "properties": {
          "center_definition": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100,
                "description": "\nThe name of the center\n"
              },
              "type": {
                "type": "string",
                "const": "vcenter",
                "description": "RESTful API type of the Center\n"
              },
              "type_label": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\ntype label of the Center (depends on the field `type` value)\n"
              },
              "notes": {
                "type": "string",
                "maxLength": 4095,
                "description": "\nNotes\n"
              },
              "allow_rogue": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2,
                "description": "Assign rogue users to desktops from this center:\n\n  - 0 = Do not assign rogue users\n  - 1 = Always assign rogue users\n  - 2 = Prevent rogue user login to desktop\n"
              },
              "allow_rogue_policy_id": {
                "type": "integer",
                "description": "If allow_rogue is true, use this policy for rogue users subsequently assigned to a desktop\n"
              },
              "continuous_autotag": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Apply auto-tags every time center is scanned\n"
              },
              "init_unavailable": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Initialize all newly-discovered VMs to \"unavailable\"\n"
              },
              "new_as_deletable": {
                "description": "Mark newly-discovered desktops as \"deletable\"\n",
                "maximum": 1,
                "minimum": 0,
                "type": "integer"
              },
              "offer_vms": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "Offer desktops from this center\n"
              },
              "poll_interval": {
                "type": "integer",
                "description": "The number of minutes to wait between polls of the center. 0 means don't poll the center\n"
              },
              "vc_url": {
                "type": "string",
                "maxLength": 255,
                "description": "The center URL\n"
              },
              "vc_name": {
                "type": "string",
                "maxLength": 255,
                "description": "The login user name for vCenter\n"
              },
              "vc_password": {
                "type": "string",
                "maxLength": 4095,
                "description": "The login password for vCenter\n"
              },
              "vc_datacenter": {
                "type": "string",
                "maxLength": 255,
                "description": "Datacenter to use (get all VMs if blank)\n"
              }
            }
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "maxLength": 100,
            "description": "\nThe UUID of the center\n"
          },
          "product_id": {
            "type": "integer",
            "readOnly": true,
            "description": "The agent type:\n\n  - 1 - Windows Host Agent\n  - 3 - Linux Host Agent (deprecated)\n  - 10 = Leostream Citrix connector\n  - 14 - Leostream Host Agent (Java)\n"
          },
          "needs_upgrade": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "Does the agent need to be upgraded\n"
          },
          "active": {
            "type": "integer",
            "readOnly": true,
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if this is an active center\n"
          }
        }
      },
      "VMwareCenterAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VMwareCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for insert\n",
            "required": [
              "center_definition"
            ],
            "properties": {
              "center_definition": {
                "type": "object",
                "required": [
                  "name",
                  "vc_url",
                  "vc_name",
                  "vc_password"
                ]
              }
            }
          }
        ]
      },
      "RespCenterScan": {
        "title": "Center scan response",
        "type": "object",
        "description": "Result of Center scan.\n",
        "properties": {
          "is_scanning": {
            "type": "integer",
            "description": "- 1 - if scan process is running\n"
          },
          "job_id": {
            "type": "integer",
            "description": "ID of running center scan job\n"
          },
          "message": {
            "type": "string",
            "description": "Message regarding running center scan job\n"
          }
        }
      },
      "ActiveDirectoryCenterUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActiveDirectoryCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for update\n",
            "required": [],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "BAD_DATA_PUT": {
        "allOf": [
          {
            "type": "object",
            "title": "BadData",
            "description": "##### Field 'error_status' is BAD_DATA\n\nTypically indicates an invalid body JSON. See the 'error_message' field for additional details.\nIf the request is missing required parameters, the 'missing_fields' field contains a list of missing parameters.\n\nNote that this behavior (using low-level errors in the 'items') may be changed in future releases of the API.\n",
            "properties": {
              "error_status": {
                "type": "string",
                "const": "BAD_DATA"
              }
            }
          },
          {
            "$ref": "#/components/schemas/ErrorBasicModel"
          }
        ]
      },
      "InvalidObjectID": {
        "allOf": [
          {
            "type": "object",
            "title": "InvalidObjectID",
            "description": "##### Field 'error_status' is BAD_ID\n\nThe operation was not successful: the request body has an invalid Pool ID value.\n",
            "properties": {
              "error_status": {
                "type": "string",
                "const": "BAD_ID"
              }
            }
          },
          {
            "$ref": "#/components/schemas/ErrorShortBasicModel"
          }
        ]
      },
      "AWSCenterUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AWSCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for update\n",
            "required": [],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "UncategorizedCenterUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UncategorizedCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for update\n",
            "required": [],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "VMwareCenterUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VMwareCenterBasic"
          },
          {
            "type": "object",
            "description": "Center object data for update\n",
            "required": [],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "VMwareESXServer_array": {
        "type": "array",
        "title": "ESX Servers array",
        "description": "A list of ESX Servers\n",
        "items": {
          "$ref": "#/components/schemas/VMwareESXServerFull"
        }
      },
      "VMwareESXServerUpdate_array": {
        "type": "array",
        "title": "ESX Servers array for update",
        "description": "A list of ESX Servers\n",
        "items": {
          "$ref": "#/components/schemas/VMwareESXServerUpdate"
        }
      },
      "RespESXServersUpdated": {
        "title": "updated ESX Servers response",
        "description": "Contains a field 'stored_ids', which contains IDs of updated ESX Servers\n\nOptionally a field 'extra_fields'.\n",
        "type": "object",
        "required": [
          "stored_ids"
        ],
        "properties": {
          "extra_fields": {
            "$ref": "#/components/schemas/extra_fields",
            "items": {
              "type": "string"
            }
          },
          "stored_ids": {
            "type": "array",
            "title": "IDs array",
            "description": "A list of updated IDs\n",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "gateway_item": {
        "title": "Gateway",
        "description": "Gateway item of array\n",
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "gateway_array": {
        "type": "array",
        "title": "Gateways array",
        "description": "A list of Gateways\n",
        "items": {
          "$ref": "#/components/schemas/gateway_item"
        }
      },
      "GatewayBasicModel": {
        "title": "Gateway",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "The gateway display name"
          },
          "address": {
            "type": "string",
            "maxLength": 255,
            "description": "The IP address or DNS name of the public side of the gateway"
          },
          "address_private": {
            "type": "string",
            "maxLength": 255,
            "description": "The IP address or DNS name of the private side of the gateway"
          },
          "load_balancer_id": {
            "type": "integer",
            "description": "The ID of the gateway cluster this gateway is part of"
          },
          "use_src_ip": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "Method for applying source IP filtering:\n\n- 0 = do not use source IP filtering, and use random port on gateway (default)\n- 1 = use source IP filtering, and same port on both gateway and desktop\n- 2 = use source IP filtering, but random port on gateway\n"
          },
          "forward_to": {
            "type": "string",
            "maxLength": 255,
            "description": "The address to which this Gateway is forwarding traffic to a Broker, if any\n"
          },
          "signature": {
            "type": "string",
            "maxLength": 100,
            "description": "Unique identifier of this Gateway, sent in the \"x-from-leo-gateway\" HTTP header, if this Gateway is forwarding traffic\n"
          },
          "notes": {
            "type": "string",
            "maxLength": 4095,
            "description": "Notes"
          }
        }
      },
      "GatewayAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayBasicModel"
          },
          {
            "type": "object",
            "description": "Gateway object data for insert\n",
            "required": [
              "name",
              "address"
            ]
          }
        ]
      },
      "GatewayFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayBasicModel"
          },
          {
            "type": "object",
            "description": "Gateway object\n",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              },
              "online": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "readOnly": true,
                "description": "A boolean field indicating if this Gateway is online/reachable"
              },
              "version": {
                "type": "string",
                "maxLength": 100,
                "readOnly": true,
                "description": "The gateway version (read-only)"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "\nTime the record was created\n"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "Time the record was last updated or modified\n"
              }
            }
          }
        ]
      },
      "RespGatewayCreated": {
        "title": "stored Gateway response",
        "allOf": [
          {
            "$ref": "#/components/schemas/RespStandard"
          },
          {
            "type": "object",
            "properties": {
              "stored_data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayFull"
                  },
                  {
                    "type": "object",
                    "description": "Gateway object in JSON representation,\nsimilar to the response of the `gateways.get` method.\n"
                  }
                ]
              }
            }
          }
        ]
      },
      "GatewayUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayBasicModel"
          },
          {
            "type": "object",
            "description": "Gateway object for update\n",
            "required": [],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "GatewayClusterBasicModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "The gateway display name"
          },
          "address": {
            "type": "string",
            "maxLength": 255,
            "description": "The IP address or DNS name of the public side of the gateway"
          },
          "load_balance_via": {
            "type": "string",
            "enum": [
              "E",
              "P",
              "L"
            ],
            "minLength": 1,
            "maxLength": 1,
            "description": "Indicates if the Connection Broker sets up forwarding ports on:\n\n- E: All Gateways in this cluster\n    - Requires an external load balancer. The external load balancer may choose any Gateway in the cluster.\n- P: The login Gateway\n    - Leostream will select the Gateway used to forward login traffic for the user's session.\n- L: The Gateway with the fewest connections\n    - Leostream will select the Gateway with the least number of active desktop connections.\n"
          },
          "use_src_ip": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "Method for applying source IP filtering:\n\n- 0 = do not use source IP filtering, and use random port on gateway (default)\n- 1 = use source IP filtering, and same port on both gateway and desktop\n- 2 = use source IP filtering, but random port on gateway\n"
          },
          "notes": {
            "type": "string",
            "maxLength": 4095,
            "description": "Notes"
          }
        }
      },
      "GatewayClusterAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayClusterBasicModel"
          },
          {
            "type": "object",
            "description": "Gateway Cluster object data for insert\n",
            "required": [
              "name",
              "load_balance_via"
            ]
          }
        ]
      },
      "GatewayClusterFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayClusterBasicModel"
          },
          {
            "type": "object",
            "description": "Gateway Cluster object\n",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "\nTime the record was created\n"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "Time the record was last updated or modified\n"
              }
            }
          }
        ]
      },
      "RespGatewayClusterCreated": {
        "title": "stored Gateway Cluster response",
        "allOf": [
          {
            "$ref": "#/components/schemas/RespStandard"
          },
          {
            "type": "object",
            "properties": {
              "stored_data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GatewayClusterFull"
                  },
                  {
                    "type": "object",
                    "description": "Gateway Cluster object in JSON representation,\nsimilar to the response of the `gateway-clusters.get` method.\n"
                  }
                ]
              }
            }
          }
        ]
      },
      "GatewayClusterUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GatewayClusterBasicModel"
          },
          {
            "type": "object",
            "description": "Gateway Cluster object for update\n",
            "required": [],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "pool_item": {
        "title": "Pool",
        "description": "Pool item of array\n",
        "type": "object",
        "required": [
          "id",
          "name",
          "parent_pool_id"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent_pool_id": {
            "type": "integer"
          },
          "assigned_vm": {
            "type": "integer"
          },
          "available_vm": {
            "type": "integer"
          },
          "unavailable_vm": {
            "type": "integer"
          },
          "total_agent_running": {
            "type": "integer"
          },
          "total_connected": {
            "type": "integer"
          },
          "total_logged_in": {
            "type": "integer"
          },
          "total_vm": {
            "type": "integer"
          },
          "total_vm_running": {
            "type": "integer"
          },
          "total_vm_stopped": {
            "type": "integer"
          },
          "total_vm_suspended": {
            "type": "integer"
          }
        }
      },
      "pool_array": {
        "type": "array",
        "title": "Pools array",
        "description": "A list of Pools\n",
        "items": {
          "$ref": "#/components/schemas/pool_item"
        }
      },
      "pools_as_tree": {
        "type": "object",
        "title": "Pools tree",
        "description": "A tree of Pools\n",
        "properties": {
          "id": {
            "type": "integer"
          },
          "level": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent_pool_id": {
            "type": "integer"
          },
          "children": {
            "type": "array"
          }
        }
      },
      "pool_attribute_item": {
        "type": "object",
        "title": "Pool attribute",
        "description": "Pool attributes item\n",
        "properties": {
          "vm_table_field": {
            "type": "string",
            "maxLength": 100,
            "description": "The machine's attribute to search; must be a column in the vm table.\nCannot exist if _ad_attribute_field_ or _vm_gpu_field_ is populated.\n\n- _name                   - Name_;\n- _display_name           - Display name_;\n- _windows_name           - Machine name_;\n- _ip                     - Hostname or IP address_;\n- _partition_names        - Disk partition name_;\n- _partition_mount_points - Partition mount point_;\n- _guest_os               - Operating system_;\n- _os_version             - Operating system version_;\n- _installed_protocols    - Installed protocols_;\n- _vc_memory_mb           - Memory (in MB)_;\n- _vc_num_cpu             - Number of CPUs_;\n- _vc_num_ethernet_cards  - Number of NICs_;\n- _num_disks              - Number of disks_;\n- _computer_model         - Computer model_;\n- _bios_serial_number     - BIOS serial number_;\n- _max_clock_speed        - CPU speed (GHz)_;\n- _notes                  - Notes_;\n- _vc_annotation          - Center \"Notes\"_;\n- _tag_filter             - Tags_;\n- _server_id              - Servers_.\n"
          },
          "ad_attribute_field": {
            "type": "string",
            "maxLength": 255,
            "description": "Desktop attribute, mandatory for LDAP attributes, see\npossible values for an AD Center in `centers.get` response,\nfield _ldap_attributes_.\nCannot exist if vm_table_field or vm_gpu_field is populated.\n"
          },
          "vm_gpu_field": {
            "type": "string",
            "maxLength": 255,
            "description": "The GPU field to search; must be a column in the vm_gpu table.\nCannot exist if _vm_table_field_ or _ad_attribute_field_ is populated.\n"
          },
          "text_to_match": {
            "type": "string",
            "maxLength": 255,
            "description": "The free form text attribute\n"
          },
          "condition_type": {
            "type": "string",
            "maxLength": 255,
            "description": "The search conditional:\n\n  - _ip - \"matches (CIDR notation)\";_\n  - _np - \"does not match (CIDR)\";_\n  - _eq - \"is equal to\";_\n  - _ne - \"is not equal to\";_\n  - _gt - \"is greater than\";_\n  - _lt - \"is less than\";_\n  - _ct - \"contains\";_\n  - _nc - \"does not contain\";_\n  - _bw - \"begins with\";_\n  - _ew - \"ends with\"._\n"
          }
        }
      },
      "pool_attributes": {
        "type": "array",
        "title": "Pool attributes",
        "description": "Array container for Pool attributes (restrict_by is 'A') or\nfor LDAP attributes (restrict_by is 'Z', requires Active Directory Centers).\n",
        "items": {
          "$ref": "#/components/schemas/pool_attribute_item"
        }
      },
      "time_limits": {
        "type": "array",
        "title": "Time limits",
        "description": "Array container for time-based provisioning limits.\n",
        "items": {
          "type": "object",
          "title": "Time limit item",
          "properties": {
            "provision_time_day": {
              "type": "integer",
              "description": "The number of the day of the week (0 - Monday, ..., 6 - Sunday)\n"
            },
            "provision_time_start": {
              "type": "string",
              "maxLength": 255,
              "description": "The start time of the time range.\n"
            },
            "provision_time_stop": {
              "type": "string",
              "maxLength": 255,
              "description": "The end time of the time range.\n"
            },
            "provision_time_threshold": {
              "type": "integer",
              "description": "Minimum number of available VMs before triggering provisioning for this time range.\n"
            },
            "provision_time_max_size": {
              "type": "integer",
              "description": "The maximum number of new machines that will be provisioned when the threshold\nis reached for this time range.\n"
            }
          }
        }
      },
      "CenterBasicModel": {
        "type": "object",
        "description": "Container for parameters related to specific Center\nto provision in.\n",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Provision Center ID.\n"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Provision Center name.\n"
          }
        }
      },
      "WaitValue": {
        "anyOf": [
          {
            "type": "integer",
            "title": "0-9",
            "minimum": 0,
            "maximum": 9
          },
          {
            "type": "integer",
            "title": "5 increments",
            "multipleOf": 5,
            "minimum": 10,
            "maximum": 55
          }
        ],
        "description": "Wait value: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55\n"
      },
      "WaitUnit": {
        "type": "string",
        "enum": [
          "seconds",
          "minutes",
          "hours"
        ],
        "description": "Wait unit in 'seconds', 'minutes' or 'hours'\n"
      },
      "Actions": {
        "type": "array",
        "title": "Provisioning Actions",
        "description": "Actions to execute after provisioning completes\n",
        "items": {
          "type": "object",
          "required": [
            "prov_action_action",
            "prov_action_wait_value",
            "prov_action_wait_unit"
          ],
          "properties": {
            "prov_action_action": {
              "type": "string",
              "enum": [
                "join_domain",
                "poweroff",
                "start",
                "set_available",
                "set_unavailable"
              ],
              "description": "An action to be executed\n* 'join_domain' - Join Domain\n* 'poweroff' - Power off\n* 'start' - Power on\n* 'set_available' - Mark desktop as Available for assignment.  This (or the set_unavailable) action is required and must be the final action.\n* 'set_unavailable' - Mark desktop as Unavailable for assignment.  This (or the set_available) action is required and must be the final action.\n"
            },
            "prov_action_wait_value": {
              "$ref": "#/components/schemas/WaitValue"
            },
            "prov_action_wait_unit": {
              "$ref": "#/components/schemas/WaitUnit"
            }
          }
        }
      },
      "CenterGoogle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CenterBasicModel"
          },
          {
            "type": "object",
            "title": "Google",
            "description": "Provision Center Google.\n\nContainer for parameters related to specific Center\nto provision in.\n",
            "required": [],
            "properties": {
              "type": {
                "type": "string",
                "const": "google",
                "description": "Human-readable type of the Center"
              },
              "zone": {
                "type": "string",
                "description": "Google Zone\n"
              },
              "machine_type": {
                "type": "string",
                "description": "Google machine type\n"
              },
              "provisioning_actions": {
                "$ref": "#/components/schemas/Actions"
              }
            }
          }
        ]
      },
      "CenterRHEV": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CenterBasicModel"
          },
          {
            "type": "object",
            "title": "RHEV",
            "description": "Provision Center RHEV.\n\nContainer for parameters related to specific Center\nto provision in.\n",
            "required": [],
            "properties": {
              "type": {
                "type": "string",
                "const": "rhev",
                "description": "Human-readable type of the Center"
              },
              "cluster": {
                "type": "string",
                "description": "RHEV Cluster\n"
              },
              "provisioning_actions": {
                "$ref": "#/components/schemas/Actions"
              }
            }
          }
        ]
      },
      "CenterScale": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CenterBasicModel"
          },
          {
            "type": "object",
            "title": "Scale",
            "description": "Provision Center Scale.\n\nContainer for parameters related to specific Center\nto provision in.\n",
            "required": [],
            "properties": {
              "type": {
                "type": "string",
                "const": "scale",
                "description": "Human-readable type of the Center"
              },
              "provisioning_actions": {
                "$ref": "#/components/schemas/Actions"
              }
            }
          }
        ]
      },
      "CenterOpenStack": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CenterBasicModel"
          },
          {
            "type": "object",
            "title": "OpenStack",
            "description": "Provision Center OpenStack.\n\nContainer for parameters related to specific Center\nto provision in.\n",
            "required": [],
            "properties": {
              "type": {
                "type": "string",
                "const": "openstack",
                "description": "Human-readable type of the Center"
              },
              "flavor": {
                "type": "string",
                "description": "ID/UUID of OpenStack flavor\n"
              },
              "network": {
                "type": "string",
                "description": "Network"
              },
              "availability_zone": {
                "type": "string",
                "description": "Availability zone"
              },
              "assign_floating_ip": {
                "type": "string",
                "description": "Attempt to associate a floating IP after provisioning,\nallocating a new IP if possible\n"
              },
              "security_groups": {
                "type": "array",
                "description": "Security groups",
                "items": {
                  "type": "string"
                }
              },
              "create_new_volume": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "description": "true if a new volume will be created when a new instance is created\n"
              },
              "delete_volume_on_instance_delete": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "description": "true if a new volume will be deleted on instance delete\n"
              },
              "new_volume_size": {
                "type": "string",
                "description": "New volume size in GB"
              },
              "new_volume_type": {
                "type": "string",
                "description": "New volume type"
              },
              "provisioning_actions": {
                "$ref": "#/components/schemas/Actions"
              }
            }
          }
        ]
      },
      "Image": {
        "type": "object",
        "title": "Provision from image",
        "description": "Provision Center AWS.\n\nContainer for parameters related to provisioning from image\n",
        "required": [],
        "properties": {
          "type": {
            "type": "string",
            "const": "amazon",
            "description": "Human-readable type of the Center"
          },
          "provision_method": {
            "type": "string",
            "const": "image",
            "description": "Deploy from image"
          },
          "aws_size": {
            "type": "string",
            "description": "The AWS instance type to provision\n"
          },
          "aws_t2_unlimited": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0,
                "maximum": 1
              },
              {
                "type": "boolean"
              }
            ],
            "description": "true if t2 instance should enable \"T2 Unlimited\"\n"
          },
          "aws_iam_name": {
            "type": "string",
            "description": "Optional IAM role\n"
          },
          "aws_sub_net": {
            "type": "string",
            "description": "AWS subnet ID"
          },
          "aws_sec_group": {
            "type": "string",
            "description": "AWS security group"
          },
          "aws_vpc_id": {
            "type": "string",
            "description": "Network Amazon VPC ID"
          },
          "provisioning_actions": {
            "$ref": "#/components/schemas/Actions"
          }
        }
      },
      "LaunchTemplate": {
        "type": "object",
        "title": "Provision from launch template",
        "description": "Provision Center AWS.\n\nContainer for parameters related to provisioning from launch template\n",
        "required": [
          "provision_method",
          "launch_template_version"
        ],
        "properties": {
          "type": {
            "type": "string",
            "const": "amazon",
            "description": "Human-readable type of the Center"
          },
          "provision_method": {
            "type": "string",
            "const": "launch_template",
            "description": "Deploy from launch template"
          },
          "launch_template_version": {
            "type": "string",
            "description": "Launch template version\n\nIf this value is 'unspecified', default version will be used.\n"
          },
          "provisioning_actions": {
            "$ref": "#/components/schemas/Actions"
          }
        }
      },
      "CenterAWS": {
        "title": "Amazon AWS",
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CenterBasicModel"
              },
              {
                "$ref": "#/components/schemas/Image"
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CenterBasicModel"
              },
              {
                "$ref": "#/components/schemas/LaunchTemplate"
              }
            ]
          }
        ]
      },
      "CenterAzure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CenterBasicModel"
          },
          {
            "type": "object",
            "title": "Azure",
            "description": "Provision Center Azure.\n\nContainer for parameters related to specific Center\nto provision in.\n",
            "required": [],
            "properties": {
              "type": {
                "type": "string",
                "const": "azure",
                "description": "Human-readable type of the Center"
              },
              "admin": {
                "type": "string",
                "description": "Administrator user name"
              },
              "password": {
                "type": "string",
                "description": "Administrator user password"
              },
              "resource_group": {
                "type": "string",
                "description": "Resource group"
              },
              "use_single_group": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "description": "Use the same Resource group for all desktop resources\n"
              },
              "disk_size": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "OS disk size in GB"
              },
              "instance_size": {
                "type": "string",
                "description": "Instance size"
              },
              "use_ephemeral_os_disk": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "description": "Use Ephemeral OS disk (OS cache placement)"
              },
              "vnet": {
                "type": "string",
                "description": "Virtual Network"
              },
              "sub_net": {
                "type": "string",
                "description": "Network/Subnet"
              },
              "create_public_ip": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "description": "Create and associate new public IP address"
              },
              "security_group": {
                "type": "string",
                "description": "Security group"
              },
              "provisioning_actions": {
                "$ref": "#/components/schemas/Actions"
              }
            }
          }
        ]
      },
      "ActionsIncludeCreateSnapshot": {
        "description": "Actions to execute after provisioning completes\n",
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "prov_action_action",
            "prov_action_wait_value",
            "prov_action_wait_unit"
          ],
          "properties": {
            "prov_action_action": {
              "type": "string",
              "enum": [
                "take_snapshot",
                "join_domain",
                "poweroff",
                "start",
                "set_available",
                "set_unavailable"
              ],
              "description": "An action to be executed\n* 'take_snapshot' - Create a snapshot\n* 'join_domain' - Join Domain\n* 'poweroff' - Power off\n* 'start' - Power on\n* 'set_available' - Mark desktop as Available for assignment.  This (or the set_unavailable) action is required and must be the final action.\n* 'set_unavailable' - Mark desktop as Unavailable for assignment.  This (or the set_available) action is required and must be the final action.\n"
            },
            "prov_action_wait_value": {
              "$ref": "#/components/schemas/WaitValue"
            },
            "prov_action_wait_unit": {
              "$ref": "#/components/schemas/WaitUnit"
            }
          }
        }
      },
      "CenterVCenter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CenterBasicModel"
          },
          {
            "type": "object",
            "title": "vCenter",
            "description": "Provision Center vCenter.\n\nContainer for parameters related to specific Center\nto provision in.\n",
            "required": [],
            "properties": {
              "type": {
                "type": "string",
                "const": "vcenter",
                "description": "Human-readable type of the Center"
              },
              "vc_spec_file_id": {
                "type": "integer",
                "description": "ID in vc_spec_file table to use for customizing template\n"
              },
              "vc_spec_file_name": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\nName of the Guest OS customization specification file\n"
              },
              "vc_resource_pool_id": {
                "type": "integer",
                "description": "ID in vc_resource_pool table to use for customizing template\n"
              },
              "vc_resource_pool_name": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\nName of the resource pool\n"
              },
              "dest_folder": {
                "type": "string",
                "description": "The destination folder moref\n"
              },
              "dest_folder_name": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\nName of the destination folder\n"
              },
              "take_snapshot": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                  },
                  {
                    "type": "boolean"
                  }
                ],
                "description": "_This field has been deprecated_.\n\nTo specify whether a snapshot should be taken immediately after a machine is provisioned,\nuse the provisioning action 'take_snapshot' defined in centers.\n"
              },
              "dest_datastores": {
                "type": "object",
                "description": "Container for destination datastores and preferences\n",
                "properties": {
                  "datastores": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "Array of destination datastores and desired disk formats\n",
                    "items": {
                      "type": "object",
                      "description": "Container for datastores information\n",
                      "required": [
                        "prov_disk_format",
                        "prov_vc_datastore_id"
                      ],
                      "properties": {
                        "prov_disk_format": {
                          "type": "string",
                          "enum": [
                            "same",
                            "thick",
                            "thin"
                          ],
                          "description": "Desired disk format\n"
                        },
                        "prov_vc_datastore_id": {
                          "type": "integer",
                          "minimum": 0,
                          "description": "ID in vc_datastore table to use determine where the disk files will be stored\n"
                        },
                        "prov_vc_datastore_desc": {
                          "type": "string",
                          "readOnly": true,
                          "description": "_Read-only field, cannot be used in update methods._\n\nDescription of the datastore with size\n"
                        }
                      }
                    }
                  },
                  "pref": {
                    "type": "object",
                    "description": "Container for the datastore distribution preference and its description\n",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "A",
                          "B",
                          "C"
                        ],
                        "description": "Datastore distribution preference:\n  - A = Fill datastores in order,\n  - B = Distribute randomly,\n  - C = Most free space\n"
                      },
                      "desc": {
                        "type": "string",
                        "readOnly": true,
                        "description": "_Read-only field, cannot be used in update methods._\n\nDescription of the distribution preference\n"
                      }
                    }
                  }
                }
              },
              "provisioning_actions": {
                "$ref": "#/components/schemas/ActionsIncludeCreateSnapshot"
              },
              "method": {
                "type": "object",
                "description": "Container for the provisioning method\n",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "T",
                      "I",
                      "L"
                    ],
                    "description": "Provisioning method:\n  - T = Deploy from template,\n  - I = Create instant clone from virtual machine,\n  - L = Create linked clone from snapshot image\n"
                  },
                  "desc": {
                    "type": "string",
                    "readOnly": true,
                    "description": "_Read-only field, cannot be used in update methods._\n\nDescription of the provisioning method\n"
                  },
                  "source_template_name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "_Read-only field, cannot be used in update methods._\n\nName of the template for \"Deploy from template method\"\n"
                  },
                  "source_snapshot": {
                    "type": "string",
                    "description": "Source snapshot machine and snapshot data\nfor linked clone provisioning\n"
                  },
                  "source_snapshot_desc": {
                    "type": "string",
                    "readOnly": true,
                    "description": "_Read-only field, cannot be used in update methods._\n\nDescription of the source snapshot\n"
                  },
                  "source_snapshot_vm_name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "_Read-only field, cannot be used in update methods._\n\nName of the snapshot virtual machine\n"
                  }
                }
              }
            }
          }
        ]
      },
      "ProvisionCenter": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CenterGoogle"
          },
          {
            "$ref": "#/components/schemas/CenterRHEV"
          },
          {
            "$ref": "#/components/schemas/CenterScale"
          },
          {
            "$ref": "#/components/schemas/CenterOpenStack"
          },
          {
            "$ref": "#/components/schemas/CenterAWS"
          },
          {
            "$ref": "#/components/schemas/CenterAzure"
          },
          {
            "$ref": "#/components/schemas/CenterVCenter"
          },
          {
            "type": "null"
          }
        ]
      },
      "ProvisionAll": {
        "title": "Provision object",
        "type": "object",
        "description": "Container for parameters related to Provisioning.\n\nProvisioning parameters depends on what Centers are defined in the Connection Broker\nand which sets of values in every Center type (e.g. Azure, AWS, etc.) are defined.\n",
        "required": [
          "provision_on_off"
        ],
        "properties": {
          "provision_on_off": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0,
                "maximum": 1
              },
              {
                "type": "boolean"
              }
            ],
            "description": "A boolean field indicating if state of provisioning for this pool is:\n\n  - Running, provision according to thresholds\n  - Stopped, disabled by user or the Broker by error\n"
          },
          "provision_tenant_id": {
            "type": "integer",
            "description": "\nThe tenant to provision into\n"
          },
          "provision_threshold": {
            "type": "integer",
            "description": "Minimum number of available VMs before triggering provisioning\n"
          },
          "provision_vm_id": {
            "type": "integer",
            "description": "ID in vm table to use as a template\n"
          },
          "provision_vm_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name to give the newly-deployed VM\n"
          },
          "provision_vm_name_next_value": {
            "type": "integer",
            "description": "The next value for sequential VM names\n"
          },
          "provision_vm_display_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The display name to give to the newly-deployed VM\n"
          },
          "provision_url": {
            "type": "string",
            "maxLength": 4095,
            "description": "URL requested when provisioning is triggered\n"
          },
          "provision_server_id": {
            "type": "integer",
            "description": "The ID of the server which will do the provisioning, or 0 if URL notification only\n"
          },
          "provision_max": {
            "type": "integer",
            "description": "The maximum number of new machines that will be provisioned when the threshold\nis reached.\n"
          },
          "provision_limits_enforce": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if Broker creates and deletes virtual machines to meet\nthe start and max threshold.\n"
          },
          "mark_deletable": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "Specifies whether to initialize newly-provisioned\ndesktops as \"deletable\".\n"
          },
          "mark_unavailable": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "_This field has been deprecated_.\nTo specify whether to initialize newly-provisioned desktops as \"unavailable\",\nuse the provisioning actions 'set_available' or 'set_unavailable' defined in centers.\n"
          },
          "time_limits": {
            "$ref": "#/components/schemas/time_limits"
          },
          "center": {
            "$ref": "#/components/schemas/ProvisionCenter"
          }
        }
      },
      "pool_join_ad_groups": {
        "type": "array",
        "title": "Pool attributes",
        "description": "Array container of the groups to which the desktop should\nbe added when a desktop joins a domain.\n",
        "items": {
          "type": "object",
          "properties": {
            "group_dn": {
              "type": "string",
              "maxLength": 255,
              "description": "The distinguishedName of a group to join.\n"
            }
          }
        }
      },
      "PoolBasicModel": {
        "title": "Pool",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "The name of the pool\n"
          },
          "display_name": {
            "type": "string",
            "maxLength": 255,
            "description": "Optional name to display to user for offer\n"
          },
          "notes": {
            "type": "string",
            "maxLength": 4095,
            "description": "\nNotes\n"
          },
          "running_desktops_threshold": {
            "type": "integer",
            "description": "Number of available, running desktops in the pool\n"
          },
          "pool_definition": {
            "type": "object",
            "required": [
              "restrict_by"
            ],
            "description": "Container for parameters related to Pool definition.\n",
            "properties": {
              "parent_pool_id": {
                "type": "integer",
                "description": "ID of the parent Pool\n"
              },
              "parent_pool_name": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\nName of the parent Pool\n"
              },
              "restrict_by": {
                "type": "string",
                "enum": [
                  "A",
                  "T",
                  "C",
                  "E",
                  "L",
                  "V",
                  "Z",
                  "H"
                ],
                "maxLength": 1,
                "description": "How this pool narrows down the parent pool:\n\n- A = by attribute (default)\n- T = by tag\n- C = by centers\n- E = vSphere hosts\n- L = vSphere clusters\n- V = vSphere resource pools\n- Z = LDAP attributes\n- H = ad hoc list (selection from parent pool)\n"
              },
              "restrict_by_desc": {
                "type": "string",
                "readOnly": true,
                "description": "_Read-only field, cannot be used in update methods._\n\nDescription of the _\"restrict_by\"_ field\n"
              },
              "vm_tags": {
                "type": "array",
                "description": "List of the tag IDs defining this pool\n"
              },
              "vm_tag_join": {
                "type": "string",
                "enum": [
                  "A",
                  "O"
                ],
                "maxLength": 1,
                "description": "How do the tags get joined:\n\n- A = And\n- O = Or\n"
              },
              "pool_attribute_join": {
                "type": "string",
                "enum": [
                  "A",
                  "O"
                ],
                "maxLength": 1,
                "description": "How do the pool attributes get joined:\n\n- A = And\n- O = Or\n"
              },
              "adhoc_vms": {
                "type": "array",
                "description": "List of desktops (id, name) for the adhoc list\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "adhoc_vc_hosts": {
                "type": "array",
                "description": "List of vCenter hosts to define a CB pool\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "adhoc_vc_clusters": {
                "type": "array",
                "description": "List of vCenter clusters to define a CB pool\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "adhoc_vc_resource_pools": {
                "type": "array",
                "description": "List of vCenter resource pools to define a CB pool\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "never_rogue": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating if desktops in this pool treat any user as the assigned user\n"
              },
              "server_ids": {
                "type": "array",
                "description": "List of the tag IDs defining this pool\n",
                "items": {
                  "type": "integer"
                }
              },
              "use_vmotion": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating whether VMs of this pool will vMotion to new host\n"
              },
              "vm_server_distribution": {
                "type": "integer",
                "minimum": 0,
                "maximum": 2,
                "description": "How should desktop offers be distributed over the servers in the pool\n\n- 0 = Randomly across all available desktops\n- 1 = To server with least number of assignments\n- 2 = To server with most available desktops\n"
              },
              "attributes": {
                "$ref": "#/components/schemas/pool_attributes"
              }
            }
          },
          "provision": {
            "$ref": "#/components/schemas/ProvisionAll"
          },
          "domain": {
            "type": "object",
            "description": "Container for parameters related to Domain Join.\n",
            "properties": {
              "domain_join": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating if Domain Join options should be applied to desktops in the pool\n"
              },
              "domain_join_ou": {
                "type": "string",
                "maxLength": 4095,
                "description": "The Organizational Unit distinguishedName, which is needed to send to the Agent in the Server.JoinDomain call\n"
              },
              "domain_join_hostname_as_vm_name": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating if the VM host name should be set to virtual machine name\n"
              },
              "domain_join_remove_on_delete": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating if the desktop should be removed from the domain when deleted"
              },
              "remote_authentication": {
                "type": "object",
                "properties": {
                  "domain_join_remote_authentication_id": {
                    "type": "integer",
                    "description": "The authentication server ID for the domain name to use\n"
                  },
                  "name": {
                    "type": "string",
                    "readOnly": true,
                    "description": "_Read-only field, cannot be used in update methods._\n\nName of the authentication server\n"
                  }
                }
              },
              "pool_join_ad_groups": {
                "$ref": "#/components/schemas/pool_join_ad_groups"
              }
            }
          },
          "log": {
            "type": "object",
            "description": "Container for parameters related to Logging and Reporting.\n",
            "properties": {
              "log_information_threshold": {
                "type": "integer",
                "description": "Minimum number of available VMs before logging an Information event\n"
              },
              "log_warning_threshold": {
                "type": "integer",
                "description": "Minimum number of available VMs before logging a Warning event\n"
              },
              "log_error_threshold": {
                "type": "integer",
                "description": "Minimum number of available VMs before logging an Error event\n"
              },
              "retain_history": {
                "type": "object",
                "properties": {
                  "pool_history_age": {
                    "type": "integer",
                    "description": "The number of days to retain pool history\n\n(If 0, history will not be retained)\n"
                  },
                  "pool_history_interval": {
                    "type": "integer",
                    "description": "The number of minutes to wait between sampling assignment and connection information\n\n(If 0, history will not be retained)\n"
                  }
                }
              }
            }
          }
        }
      },
      "PoolAdd": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PoolBasicModel"
          },
          {
            "type": "object",
            "description": "Pool object data for insert\n",
            "required": [
              "name",
              "pool_definition"
            ]
          }
        ]
      },
      "PoolFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PoolBasicModel"
          },
          {
            "type": "object",
            "description": "Pool full object\n",
            "required": [
              "name",
              "pool_definition"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              },
              "vc_datastore_id": {
                "type": "integer",
                "readOnly": true,
                "description": "_Deprecated. Read-only field for compatibility with older configurations._\n\nID in vc_datastore table to use determine where the disk files will be stored\n"
              },
              "read_only": {
                "type": "integer",
                "readOnly": true,
                "minimum": 0,
                "maximum": 1,
                "description": "0 or 1"
              },
              "pool_type": {
                "type": "string",
                "readOnly": true,
                "maxLength": 1,
                "description": "The type of this pool:\n\n- A = Application\n- D = Desktop (default)\n- T = Template\n"
              },
              "is_root": {
                "type": "integer",
                "readOnly": true,
                "minimum": 0,
                "maximum": 1,
                "description": "A boolean field indicating if this is the root of a pool hierarchy\n\nThis should be 1 (on) only for the three pools: All Applications, All Desktops, Templates\n"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "\nTime the record was created\n"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "Time the record was last updated or modified\n"
              },
              "pool_stats": {
                "type": "object",
                "properties": {
                  "counts_updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of statistics count\n"
                  },
                  "total_vm": {
                    "type": "integer",
                    "description": "Total number of desktops in this pool, at last scan\n\nThis should always be equal to assigned_vm + available_vm + unavailable_vm\n"
                  },
                  "total_agent_running": {
                    "type": "integer",
                    "description": "Total number of desktops with running agent in this pool, at last scan\n"
                  },
                  "total_vm_running": {
                    "type": "integer",
                    "description": "Total number of running desktops in this pool, at last scan\n"
                  },
                  "total_vm_stopped": {
                    "type": "integer",
                    "description": "Total number of stopped desktops in this pool, at last scan\n"
                  },
                  "total_vm_suspended": {
                    "type": "integer",
                    "description": "Total number of suspended desktops in this pool, at last scan\n"
                  },
                  "total_logged_in": {
                    "type": "integer",
                    "description": "Total number of desktops with logged-in users in this pool, at last scan\n"
                  },
                  "total_connected": {
                    "type": "integer",
                    "description": "Total number of desktops with connected users in this pool, at last scan\n"
                  },
                  "assigned_vm": {
                    "type": "integer",
                    "description": "Total number of assigned desktops in this pool, at last scan\n"
                  },
                  "available_vm": {
                    "type": "integer",
                    "description": "Total number of available desktops in this pool, at last scan\n"
                  },
                  "unavailable_vm": {
                    "type": "integer",
                    "description": "Total number of unavailable desktops in this pool, at last scan\n"
                  }
                }
              },
              "vms_list": {
                "type": "array",
                "title": "desktops array",
                "readOnly": true,
                "description": "A list of basic VM info of the Pool\n",
                "items": {
                  "type": "object",
                  "description": "A VM basic info item\n",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "display_name": {
                      "type": "string"
                    },
                    "hda_status": {
                      "type": "string"
                    },
                    "out_of_service": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "user_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "RespPoolCreated": {
        "title": "stored Pool response",
        "allOf": [
          {
            "$ref": "#/components/schemas/RespStandard"
          },
          {
            "type": "object",
            "properties": {
              "stored_data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PoolFull"
                  },
                  {
                    "type": "object",
                    "description": "Pool object in JSON representation,\nsimilar to the response of the `pools.get` method.\n"
                  }
                ]
              }
            }
          }
        ]
      },
      "PoolUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PoolBasicModel"
          },
          {
            "type": "object",
            "description": "Pool object data for insert\n",
            "required": [],
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "session_login": {
        "type": "object",
        "title": "Session Login",
        "description": "Login to user session parameters\n",
        "properties": {
          "user_login": {
            "type": "string",
            "description": "User login name.",
            "maxLength": 64
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User login password.",
            "minLength": 3,
            "maxLength": 100
          },
          "domain": {
            "type": "string",
            "description": "Domain for user login.",
            "maxLength": 255
          }
        },
        "required": [
          "user_login",
          "password"
        ]
      },
      "INVALID_CREDENTIALS": {
        "type": "object",
        "title": "INVALID_CREDENTIALS",
        "description": "##### Field 'error_status' is INVALID_CREDENTIALS\n\nInvalid credentials. See the 'error_message' field for details.\n",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "INVALID_CREDENTIALS"
          },
          "error_message": {
            "type": "string",
            "description": "Contains additional details about the invalid credentials error.\n"
          }
        }
      },
      "LICENSE_EXPIRED": {
        "type": "object",
        "title": "LICENSE_EXPIRED",
        "description": "##### Field 'error_status' is LICENSE_EXPIRED\n\nLicense expired.\n",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "LICENSE_EXPIRED"
          },
          "error_message": {
            "type": "string",
            "description": "License expired message.\n"
          }
        }
      },
      "policy_item": {
        "title": "Policy",
        "description": "Policy item of array\n",
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID. Automatically assigned by the system.\n"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "\nThe name of this policy.\n"
          }
        }
      },
      "policies_array": {
        "type": "array",
        "title": "Policies array",
        "description": "A list of Policies\n",
        "items": {
          "$ref": "#/components/schemas/policy_item"
        }
      },
      "session_expire": {
        "type": "integer",
        "enum": [
          -1,
          1,
          2,
          5,
          10,
          15,
          20,
          30,
          60,
          120,
          180,
          240,
          480,
          720,
          1440,
          2880
        ]
      },
      "short": {
        "type": "integer",
        "enum": [
          1,
          2,
          3,
          4,
          5,
          10,
          15
        ]
      },
      "regular": {
        "type": "integer",
        "enum": [
          -1,
          0,
          1,
          2,
          3,
          4,
          5,
          10,
          15,
          30,
          45,
          60,
          120,
          180,
          240,
          300,
          360,
          420,
          480,
          720,
          1440,
          2880,
          4320,
          5760,
          7200,
          8640,
          10080,
          20160
        ]
      },
      "idle": {
        "type": "integer",
        "enum": [
          -1,
          5,
          10,
          15,
          30,
          45,
          60,
          120,
          180,
          240,
          300,
          360,
          420,
          480,
          720,
          1440,
          2880,
          4320,
          5760,
          7200,
          8640,
          10080
        ]
      },
      "pool_assignments_item": {
        "title": "Policy Assignment",
        "description": "Policy Pool Assignment item of array\n",
        "type": "object",
        "required": [
          "pool_id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID. Automatically assigned by the system.\n"
          },
          "pool_id": {
            "type": "integer",
            "description": "\nThe associated pool\n"
          },
          "pool_name": {
            "type": "string",
            "description": "\nThe name of the associated pool\n"
          }
        }
      },
      "pool_assignments_array": {
        "type": "array",
        "title": "Policy Assignments array",
        "description": "A list of Policy Pool Assignments\n",
        "items": {
          "$ref": "#/components/schemas/pool_assignments_item"
        }
      },
      "policy_attributes_item": {
        "type": "object",
        "title": "Policy attribute",
        "description": "Policy attributes item of array\n",
        "required": [
          "condition_type"
        ],
        "properties": {
          "vm_attribute": {
            "type": "string",
            "maxLength": 255,
            "description": "The vm table attribute to search\n"
          },
          "condition_type": {
            "type": "string",
            "maxLength": 2,
            "description": "\nThe search conditional\n"
          },
          "attribute_type": {
            "type": "string",
            "maxLength": 16,
            "description": "The type attribute to search:\n\n- user\n- client\n- text\n"
          },
          "user_attribute": {
            "type": "string",
            "maxLength": 255,
            "description": "\nThe user attribute to search\n"
          },
          "text_attribute": {
            "type": "string",
            "maxLength": 255,
            "description": "\nThe free form text attribute\n"
          }
        }
      },
      "policy_attributes_array": {
        "type": "array",
        "title": "Policy attributes array",
        "description": "A list of Policy attributes\n",
        "items": {
          "$ref": "#/components/schemas/policy_attributes_item"
        }
      },
      "policy_usb_item": {
        "title": "Policy USB",
        "description": "Policy USB permissions item of array\n",
        "type": "object",
        "required": [
          "devclass"
        ],
        "properties": {
          "vendorid": {
            "type": "string",
            "maxLength": 20,
            "description": "The USB vendor ID, typically a four-digit hex value\n"
          },
          "productid": {
            "type": "string",
            "maxLength": 20,
            "description": "The USB product ID, typically a four-digit hex value\n"
          },
          "devclass": {
            "type": "string",
            "maxLength": 20,
            "description": "\nThe USB device class\n"
          },
          "subclass": {
            "type": "string",
            "maxLength": 20,
            "description": "\nThe USB device subclass\n"
          },
          "protocol": {
            "type": "string",
            "maxLength": 20,
            "description": "\nThe USB device protocol\n"
          }
        }
      },
      "policy_usb_array": {
        "type": "array",
        "title": "Policy USB array",
        "description": "A list of Policy USB permissions\n",
        "items": {
          "$ref": "#/components/schemas/policy_usb_item"
        }
      },
      "policy_vmware_view_server_item": {
        "title": "VMware View Server",
        "description": "Policy VMware View Server item of array\n",
        "type": "object",
        "required": [
          "vmware_view_server_name",
          "vmware_view_server_url"
        ],
        "properties": {
          "vmware_view_server_name": {
            "type": "string",
            "maxLength": 255,
            "description": "The name of this VMware View Server\n"
          },
          "vmware_view_server_url": {
            "type": "string",
            "maxLength": 255,
            "description": "The URL of this VMware View Server\n"
          }
        }
      },
      "policy_vmware_view_server_array": {
        "type": "array",
        "title": "VMware View Servers array",
        "description": "A list of Policy VMware View Servers\n",
        "items": {
          "$ref": "#/components/schemas/policy_vmware_view_server_item"
        }
      },
      "PolicyFull": {
        "title": "Policy",
        "description": "Policy full object\n",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID. Automatically assigned by the system.\n"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "\nThe name of this policy.\n"
          },
          "is_default": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if this is the default policy\n"
          },
          "web_client_new_window": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if Java-based and external web client viewers\nshould be launched in new windows.\n"
          },
          "hide_hover_menu": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether Leostream Connect clients should hide their hover menu when a desktop is locked.\n"
          },
          "single_desktop_only": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether the user limited to a single desktop connection (Leostream Connect only).\n"
          },
          "offer_empty_pools": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether clients should inform end-users that a pool has no resources available\n"
          },
          "alt_credentials": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether the user will be prompted to enter alternate credentials for use when connecting to the desktop (PCoIP only)\n"
          },
          "store_configurable_params": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "How the user-configured protocol parameters are stored:\n\n- 0 = Individually for each connection/client pair (default)\n- 1 = Globally for all connections and from every client\n"
          },
          "max_desktops": {
            "type": "integer",
            "description": "The maximum number of desktops that a user can have at any one time, or -1 for no limit.\n"
          },
          "attribute_join": {
            "type": "string",
            "maxLength": 1,
            "description": "How do the policy filter attributes get joined:\n\n- A = And\n- O = Or (default)\n"
          },
          "filter_ad_refresh": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether Active Directory attributes used in Policy filters should be refreshed with each login.\n"
          },
          "session_expire_delay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/session_expire"
              },
              {
                "description": "Number of minutes to wait before expiring a user's Connection Broker session (offers), or -1 for no delay.\n"
              }
            ]
          },
          "session_expire_on_lock": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to expire a user's Connection Broker session (offers) when a remote desktop locks.\n"
          },
          "ha_display_mode": {
            "type": "string",
            "maxLength": 1,
            "description": "How to describe the offered hard-assigned machines:\n\n- 0 = Desktop name (default)\n- 5 = Display name\n- 1 = Windows machine name\n"
          },
          "ha_enable_power_control": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "_This field has been deprecated_.\nHow to perform power control actions of a hard-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Power Control with Shutdown\n- 2 = Power Control with Power off\n"
          },
          "ha_enable_power_control_stop": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "How to perform the power control actions shutdown and power off of a hard-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Power Control with Shutdown\n- 2 = Power Control with Power off\n"
          },
          "ha_enable_power_control_reboot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "How to perform the power control action reboot of a hard-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Power Control with Reboot\n- 2 = Power Control with Power off and start\n"
          },
          "ha_enable_power_control_ipmi_reset": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "Enable IPMI reset as power control of a hard-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Yes, allow user to send IPMI reset\n"
          },
          "ha_confirm_power_state": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to probe a machine for its power state when assigned\n"
          },
          "ha_start_if_stopped": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to attempt to power on a machine if it's currently stopped/suspended\n"
          },
          "ha_logout_rogue": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that rogue users should be logged out on a hard-assigned machine.\n"
          },
          "ha_auto_login": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that a console single sign-on (DCV, VNC, PCoIP, and HTML5) should be done on a hard-assigned machine.\n"
          },
          "ha_auto_login_domain": {
            "type": "string",
            "maxLength": 255,
            "description": "Text or dynamic tag of the domain for console single sign-on for a hard-assigned machine\n"
          },
          "ha_auto_login_password": {
            "type": "string",
            "maxLength": 4095,
            "description": "Text or dynamic tag of the password for console single sign-on for a hard-assigned machine\n"
          },
          "ha_auto_login_user": {
            "type": "string",
            "maxLength": 255,
            "description": "Text or dynamic tag of the username for console single sign-on for a hard-assigned machine\n"
          },
          "ha_power_on": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "Determines which stopped and suspended machines are offered:\n\n- 0 = Do not offer any stopped/suspended machines\n- 1 = Offer any stopped/suspended machine\n- 2 = Offer only stopped/suspended machine if Leostream Agent is installed\n"
          },
          "ha_adjust_timezone": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that the timezone of the destination desktop\nwill be changed to the user's current timezone at login.\n"
          },
          "ha_enable_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if session shadowing is enabled on a hard-assigned machine\n"
          },
          "ha_email_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if the session owner can decide if an email should be sent to the user being invited\n"
          },
          "ha_email_decline_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if the user that sent the invitation should be notified via email (no user choice for this option),\nif the invited user declines the invitation\n"
          },
          "ha_shadowing_filter": {
            "type": "string",
            "maxLength": 100,
            "description": "The method used to decide which users will be allowed to use session shadowing:\n\n- 0: Included for all users\n- 1: Only included if user's AD record matches the shadowing_filter_json criteria\n"
          },
          "ha_shadowing_filter_json": {
            "type": [
              "object",
              "null"
            ],
            "description": "The user shadowing filter as a JSON data structure\n"
          },
          "ha_gateway_port_close_delay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/short"
              },
              {
                "description": "Number of minutes to wait before closing Gateway ports when a hard-assigned user fails to login\n"
              }
            ]
          },
          "ha_login_as": {
            "type": "string",
            "maxLength": 1,
            "description": "Determines how domain is sent in protocol plans and single sign-on commands:\n\n- R = Defer to Role setting: role.login_as_local_user\n- D = Always send user's domain (log in as a domain user)\n- L = Always send desktop machine name (log in as a local user)\n"
          },
          "ha_disconnect_logout_delay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/regular"
              },
              {
                "description": "Number of minutes to wait after disconnect before logging user out of hard-assigned machine, or -1 for no logout action\n"
              }
            ]
          },
          "ha_idle_lock_delay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/idle"
              },
              {
                "description": "Number of minutes to wait since the desktop becomes idle before locking the hard-assigned machine, or -1 for no lock action\n"
              }
            ]
          },
          "ha_idle_disconnect_delay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/idle"
              },
              {
                "description": "Number of minutes to wait since the desktop becomes idle before disconnecting user from hard-assigned machine, or -1 for no disconnect action\n"
              }
            ]
          },
          "ha_idle_logout_delay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/idle"
              },
              {
                "description": "Number of minutes to wait since the desktop becomes idle before logging user out of hard-assigned machine, or -1 for no logout action\n"
              }
            ]
          },
          "ha_on_idle_url_delay": {
            "allOf": [
              {
                "$ref": "#/components/schemas/idle"
              },
              {
                "description": "Number of minutes to wait since the desktop becomes idle before calling a URL (defined in ha_on_idle_url) out of hard-assigned machine, or -1 for no url call action\n"
              }
            ]
          },
          "ha_on_idle_url": {
            "type": "string",
            "maxLength": 255,
            "description": "A URL that is called after a delay (defined in ha_on_idle_url_delay) since the desktop becomes idle.\nMay include dynamic tags.\n"
          },
          "ha_never_rogue": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if hard-assigned desktops from this policy treat any user as the assigned user\n"
          },
          "ha_offer_running_without_hda": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that hard-assigned machines without a running Leostream Agent may be offered\n"
          },
          "ha_on_disconnect_url": {
            "type": "string",
            "maxLength": 255,
            "description": "A URL that is called when the desktop session is disconnected.\nMay include dynamic tags.\n"
          },
          "ha_on_logout_url": {
            "type": "string",
            "maxLength": 255,
            "description": "A URL that is called when the user logs out of the desktop session.\nMay include dynamic tags.\n"
          },
          "ha_retain_connection": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if VNC or PCoIP sessions should be kept connected\n"
          },
          "ha_unverified_user_state": {
            "type": "string",
            "maxLength": 1,
            "description": "A field indicating how to treat an unverified user state upon a client disconnect:\n\n- L = Logout\n- D = Disconnect\n"
          },
          "ha_plan_protocol_id": {
            "type": "integer",
            "description": "The protocol plan for hard-assigned machines\n"
          },
          "ha_plan_power_control_id": {
            "type": "integer",
            "description": "The power control plan for hard-assigned machines\n"
          },
          "ha_plan_script_id": {
            "type": "integer",
            "description": "The scripting plan for hard-assigned machines\n"
          },
          "external_services_json": {
            "type": [
              "array",
              "null"
            ],
            "description": "The selected external services and their configurations as a JSON data structure\n"
          },
          "rogue_plan_power_control_id": {
            "type": "integer",
            "description": "The power control plan for rogue-assigned machines\n"
          },
          "rogue_plan_release_id": {
            "type": "integer",
            "description": "The release plan for rogue-assigned machines\n"
          },
          "rogue_plan_script_id": {
            "type": "integer",
            "description": "The scripting plan for rogue-assigned machines\n"
          },
          "launch_rdc": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that a remote session should be automatically launched at sign in.\n"
          },
          "usb_enabled": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether USB passthrough is enabled for this policy, defaults to 0.\n"
          },
          "usb_mode": {
            "type": "string",
            "maxLength": 1,
            "description": "The USB passthrough mode:\n\n- A = Connect all USB devices (default)\n- N = Block all USB devices\n- C = Connect specific USB devices\n"
          },
          "session_start_url_cb": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a URL should be called at when a new session is started\n"
          },
          "session_start_url": {
            "type": "string",
            "maxLength": 255,
            "description": "A URL that is called whenever a new session is started with the Connection Broker.\nMay include dynamic tags.\n"
          },
          "session_start_url_timeout": {
            "type": "integer",
            "description": "The timeout for the session_start_url HTTP GET request\n"
          },
          "session_start_url_block": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if the user's login should be blocked if the URL call fails\n"
          },
          "session_start_url_block_msg": {
            "type": "string",
            "maxLength": 4095,
            "description": "If the session start URL call fails, and the policy is set to block logins, display this message to the user\n"
          },
          "backup_ha_pool_id": {
            "type": "integer",
            "description": "The hard-assigned backup pool id\n"
          },
          "backup_ha_pool_criteria_agent": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a desktop is offered from the backup pool\nwhen the Leostream Agent is unreachable on the primary desktop\n"
          },
          "backup_ha_pool_criteria_viewer": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a desktop is offered from the backup pool\nwhen the Remote viewer port on the primary desktop is unreachable\n"
          },
          "backup_ha_plan_protocol_id": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "The protocol plan for hard-assigned backup pool\n"
          },
          "backup_ha_plan_power_control_id": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "The power control plan for hard-assigned backup pool\n"
          },
          "backup_ha_plan_release_id": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "The release plan for hard-assigned backup pool\n"
          },
          "sa_adjust_timezone": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that the timezone of the destination desktop\nwill be changed to the user's current timezone at login.\n"
          },
          "sa_auto_login": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that a console single sign-on (DCV, VNC, PCoIP, and HTML5) should be done on a schedule-assigned machine.\n"
          },
          "sa_auto_login_domain": {
            "type": "string",
            "maxLength": 255,
            "description": "Text or dynamic tag of the domain for console single sign-on for a schedule-assigned machine\n"
          },
          "sa_auto_login_password": {
            "type": "string",
            "maxLength": 4095,
            "description": "Text or dynamic tag of the password for console single sign-on for a schedule-assigned machine\n"
          },
          "sa_auto_login_user": {
            "type": "string",
            "maxLength": 255,
            "description": "Text or dynamic tag of the username for console single sign-on for a schedule-assigned machine\n"
          },
          "sa_confirm_power_state": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to probe a machine for its power state when assigned\n"
          },
          "sa_display_mode": {
            "type": "string",
            "maxLength": 1,
            "description": "How to describe the offered schedule-assigned machines:\n\n- 0 = Desktop name (default)\n- 5 = Display name\n- 1 = Windows machine name\n"
          },
          "sa_email_decline_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if the user that sent the invitation should be notified via email (no user choice for this option), if the invited user declines the invitation.\n"
          },
          "sa_email_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if the session owner can decide if an email should be sent to the user being invited\n"
          },
          "sa_enable_power_control": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "_This field has been deprecated_.\nHow to perform power control actions of a schedule-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Power Control with Shutdown\n- 2 = Power Control with Power off and Start\n"
          },
          "sa_enable_power_control_stop": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "How to perform the power control actions shutdown and power off of a schedule-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Power Control with Shutdown\n- 2 = Power Control with Power off and Start\n"
          },
          "sa_enable_power_control_reboot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "How to perform the power control action reboot of a schedule-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Power Control with Reboot\n- 2 = Power Control with Power off and Start\n"
          },
          "sa_enable_power_control_ipmi_reset": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "Enable IPMI reset as power control of a schedule-assigned machine if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Yes, allow user to send IPMI reset\n"
          },
          "sa_enable_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if session shadowing is enabled on a schedule-assigned machine\n"
          },
          "sa_login_as": {
            "type": "string",
            "maxLength": 1,
            "description": "Determines how domain is sent in protocol plans and single sign-on commands for schedule-assigned desktops:\n\n- R = Defer to Role setting: role.login_as_local_user (this is the default)\n- D = Always send user's domain (log in as a domain user)\n- L = Always send desktop machine name (log in as a local user)\n"
          },
          "sa_logout_rogue": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that rogue users should be logged out on a schedule-assigned machine.\n"
          },
          "sa_offer_pending_reboot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if machines with a pending reboot should be offered\n"
          },
          "sa_offer_running_without_hda": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that schedule-assigned machines without a running Leostream Agent may be offered\n"
          },
          "sa_on_assign_url": {
            "type": "string",
            "maxLength": 255,
            "description": "A URL that is called when a scheduled desktop is assigned, if sa_on_assign_url_cb is true.\nMay include dynamic tags.\n"
          },
          "sa_on_assign_url_cb": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a URL should be called at assignment time for a schedule-assigned desktop.\n"
          },
          "sa_on_assign_url_timeout": {
            "type": "integer",
            "description": "The timeout for the sa_on_assign_url HTTP GET request\n"
          },
          "sa_plan_power_control_id": {
            "type": "integer",
            "description": "The power control plan for schedule-assigned machines\n"
          },
          "sa_plan_protocol_id": {
            "type": "integer",
            "description": "The protocol plan for schedule-assigned machines\n"
          },
          "sa_plan_release_id": {
            "type": "integer",
            "description": "The release plan for schedule-assigned machines\n"
          },
          "sa_plan_script_id": {
            "type": "integer",
            "description": "The scripting plan for schedule-assigned machines\n"
          },
          "sa_power_on": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "Determines which stopped and suspended machines are offered:\n\n- 0 = Do not offer any stopped/suspended machines\n- 1 = Offer any stopped/suspended machine\n- 2 = Offer only stopped/suspended machine if Leostream Agent is installed\n"
          },
          "sa_prevent_release": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether user can manually release a vm (0=yes)\n"
          },
          "sa_revert_to_snapshot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that the machine should be reverted to the last snapshot when assigned\n"
          },
          "sa_shadowing_filter": {
            "type": "string",
            "maxLength": 100,
            "description": "The method used to decide which users will be allowed to use session shadowing:\n\n- 0: Included for all users\n- 1: Only included if user's AD record matches the sa_shadowing_filter_json criteria\n"
          },
          "sa_shadowing_filter_json": {
            "type": [
              "object",
              "null"
            ],
            "description": "The user shadowing filter as a JSON data structure\n"
          },
          "sa_start_if_stopped": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to attempt to power on a machine if it's currently stopped/suspended\n"
          },
          "notes": {
            "type": "string",
            "maxLength": 4095,
            "description": "\nNotes\n"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "\nTime the record was created\n"
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time the record was last updated or modified\n"
          },
          "pool_assignments": {
            "$ref": "#/components/schemas/pool_assignments_array"
          },
          "attributes": {
            "$ref": "#/components/schemas/policy_attributes_array"
          },
          "usb": {
            "$ref": "#/components/schemas/policy_usb_array"
          },
          "vmware_view_servers": {
            "$ref": "#/components/schemas/policy_vmware_view_server_array"
          }
        }
      },
      "RespPolicyCreated": {
        "title": "stored Policy response",
        "allOf": [
          {
            "$ref": "#/components/schemas/RespStandard"
          },
          {
            "type": "object",
            "properties": {
              "stored_data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PolicyFull"
                  },
                  {
                    "type": "object",
                    "description": "Policy object in JSON representation,\nsimilar to the response of the `policies.get` method.\n"
                  }
                ]
              }
            }
          }
        ]
      },
      "PoolAssignmentAdd": {
        "title": "Policy Assignment",
        "description": "Policy Pool Assignment object data for insert\n",
        "type": "object",
        "required": [
          "pool_id"
        ],
        "properties": {
          "policy_id": {
            "type": "integer",
            "description": "\nThe associated policy\n"
          },
          "pool_id": {
            "type": "integer",
            "description": "\nThe associated pool\n"
          },
          "backup_pool_id": {
            "type": "integer",
            "description": "\nThe associated backup pool\n"
          },
          "backup_pool_criteria_agent": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a desktop is offered from the backup pool\nwhen the Leostream Agent is unreachable on the primary desktop\n"
          },
          "backup_pool_criteria_viewer": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a desktop is offered from the backup pool\nwhen the Remote viewer port on the primary desktop is unreachable\n"
          },
          "backup_pool_criteria_empty": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a desktop is offered from the backup pool\nwhen the primary pool is empty\n"
          },
          "plan_protocol_id": {
            "type": "integer",
            "description": "The protocol plan for this pool\n"
          },
          "plan_power_control_id": {
            "type": "integer",
            "description": "The power control plan for this pool\n"
          },
          "plan_release_id": {
            "type": "integer",
            "description": "The release plan for this pool\n"
          },
          "plan_script_id": {
            "type": "integer",
            "description": "The scripting plan for this pool\n"
          },
          "bu_plan_protocol_id": {
            "type": "integer",
            "description": "The protocol plan for the backup pool\n"
          },
          "bu_plan_power_control_id": {
            "type": "integer",
            "description": "The power control plan for the backup pool\n"
          },
          "bu_plan_release_id": {
            "type": "integer",
            "description": "The release plan for the backup pool\n"
          },
          "offer_quantity": {
            "type": "integer",
            "description": "The number of VMs to offer to a user at login\n"
          },
          "offer_filter": {
            "type": "string",
            "maxLength": 100,
            "description": "The method used to decide whether desktops from this pool will be included in the offer:\n\n- 0: Included for all users\n- 1: Only included if user's AD record matches the offer_filter_json criteria\n- 2: Only included if current date and time is within the offer_filter_json time ranges\n"
          },
          "offer_filter_json": {
            "type": [
              "object",
              "null"
            ],
            "description": "The user offer filter as a JSON data structure\n"
          },
          "display_mode": {
            "type": "string",
            "maxLength": 20,
            "description": "How to describe the offered machines:\n\n- 0 = Desktop name (default)\n- 5 = Desktop display name\n- 1 = Machine name\n- 2 = Pool name\n- 3 = Pool name : Desktop name\n- 6 = Pool name : Desktop display name\n- 4 = Pool name : Machine name\n- 7 = Pool display name\n- 8 = Pool display name : Desktop name\n- 9 = Pool display name : Desktop display name\n- 10= Pool display name : Machine name\n"
          },
          "offer_running_without_hda": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that machines without a running Leostream Agent may be offered\n"
          },
          "kiosk": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to offer a different machine with each login\n"
          },
          "revert_to_snapshot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that the machine should be reverted to the last snapshot when assigned\n"
          },
          "confirm_power_state": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to probe a machine for its power state when assigned\n"
          },
          "start_if_stopped": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether to attempt to power on a machine if it's currently stopped/suspended\n"
          },
          "power_on": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "Determines which stopped and suspended machines are offered:\n\n- 0 = Do not offer any stopped/suspended machines\n- 1 = Offer any stopped/suspended machine\n- 2 = Offer only stopped/suspended machine if Leostream Agent is installed\n"
          },
          "favor_previous_assigned": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4,
            "description": "How to order offered machines:\n\n- 0 = Randomly (any available desktop)\n- 1 = Favor desktops previously-assigned to this user (default)\n- 2 = Sort by desktop creation date (first-in, first-out)\n- 3 = Favor least recently offered desktops\n- 4 = Favor running desktops\n"
          },
          "offer_pending_reboot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if machines with a pending reboot should be offered\n"
          },
          "enable_power_control": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "_This field has been deprecated_.\nHow to perform power control actions if requested by a user from a thin client:\n\n- 0 = Not allowed\n- 1 = Power Control with Shutdown\n- 2 = Power Control with Power off\n"
          },
          "enable_power_control_stop": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "How to perform the power control actions shutdown and power off if requested by a user from a thin client or the web client:\n\n- 0 = Not allowed\n- 1 = Power Control with Shutdown\n- 2 = Power Control with Power off\n"
          },
          "enable_power_control_reboot": {
            "type": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "How to perform the power control action reboot if requested by a user from a thin client or the web client:\n\n- 0 = Not allowed\n- 1 = Power Control with Reboot\n- 2 = Power Control with Power off and Start\n"
          },
          "enable_power_control_ipmi_reset": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "Enable IPMI reset as power control if requested by a user from a thin client:\n\n- 0 = Not allowed (default)\n- 1 = Yes, allow user to send IPMI reset\n"
          },
          "logout_rogue": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that rogue users should be logged out\n"
          },
          "auto_login": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that a console single sign-on (DCV, VNC, PCoIP, and HTML5) should be done\n"
          },
          "auto_login_domain": {
            "type": "string",
            "maxLength": 255,
            "description": "Text or dynamic tag of the domain for console single sign-on\n"
          },
          "auto_login_password": {
            "type": "string",
            "maxLength": 4095,
            "description": "Text or dynamic tag of the password for console single sign-on\n"
          },
          "auto_login_user": {
            "type": "string",
            "maxLength": 255,
            "description": "Text or dynamic tag of the username for console single sign-on\n"
          },
          "prevent_release": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating whether user can manually release a vm (0=yes)\n"
          },
          "adjust_timezone": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating that the timezone of the destination desktop\nwill be changed to the user's current timezone at login.\n"
          },
          "on_assign_url_cb": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if a URL should be called at assignment time\n"
          },
          "on_assign_url": {
            "type": "string",
            "maxLength": 255,
            "description": "A URL that is called when a desktop is assigned, if on_assign_url_cb is true.\nMay include dynamic tags.\n"
          },
          "on_assign_url_timeout": {
            "type": "integer",
            "description": "The timeout for the on_assign_url HTTP GET request\n"
          },
          "enable_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if session shadowing is enabled\n"
          },
          "email_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if the session owner can decide if an email should be sent to the user being invited\n"
          },
          "email_decline_shadowing": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "A boolean field indicating if the user that sent the invitation should be notified via email (no user choice for this option),\nif the invited user declines the invitation\n"
          },
          "shadowing_filter": {
            "type": "string",
            "maxLength": 100,
            "description": "The method used to decide which users will be allowed to use session shadowing:\n\n- 0: Included for all users\n- 1: Only included if user's AD record matches the shadowing_filter_json criteria\n"
          },
          "shadowing_filter_json": {
            "type": [
              "object",
              "null"
            ],
            "description": "The user shadowing filter as a JSON data structure\n"
          },
          "login_as": {
            "type": "string",
            "maxLength": 1,
            "description": "Determines how domain is sent in protocol plans and single sign-on commands:\n\n- R = Defer to Role setting: role.login_as_local_user\n- D = Always send user's domain (log in as a domain user)\n- L = Always send desktop machine name (log in as a local user)\n"
          },
          "attribute_filter": {
            "oneOf": [
              {
                "type": "array",
                "description": "The pool filter as a JSON data structure\n"
              },
              {
                "type": "string",
                "maxLength": 4095,
                "description": "The pool filter as a JSON data structure\n"
              }
            ]
          },
          "attribute_join": {
            "type": "string",
            "maxLength": 1,
            "description": "How do the pool filter attributes get joined:\n\n- A = And\n- O = Or\n"
          }
        }
      },
      "PoolAssignmentFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PoolAssignmentAdd"
          },
          {
            "type": "object",
            "description": "Policy Pool Assignment object\n",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "\nTime the record was created\n"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "Time the record was last updated or modified\n"
              }
            }
          }
        ]
      },
      "RespPoolAssignmentCreated": {
        "title": "stored Policy Assignment response",
        "allOf": [
          {
            "$ref": "#/components/schemas/RespStandard"
          },
          {
            "type": "object",
            "properties": {
              "stored_data": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PoolAssignmentFull"
                  },
                  {
                    "type": "object",
                    "description": "Policy Pool Assignment object in JSON representation,\nsimilar to the response of the `policies.pool_assignments.get` method.\n"
                  }
                ]
              }
            }
          }
        ]
      },
      "PoolAssignmentUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PoolAssignmentAdd"
          },
          {
            "type": "object",
            "description": "Policy Pool Assignment object\n",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique ID. Automatically assigned by the system.\n"
              }
            }
          }
        ]
      },
      "LicenseData": {
        "title": "License",
        "description": "Leostream license information\n",
        "type": "object"
      },
      "SystemHealth": {
        "type": "object",
        "properties": {
          "components": {
            "type": "object",
            "description": "Broker components/services. Inactive or disabled components have a `null` value.",
            "properties": {
              "auth": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "Remote authentication connectivity",
                "properties": {
                  "msg": {
                    "type": "string",
                    "description": "Status message",
                    "enum": [
                      "OK",
                      "cannot connect"
                    ]
                  },
                  "reachable": {
                    "type": "integer",
                    "description": "Broker can connect to all active remote AD & LDAP servers.",
                    "enum": [
                      0,
                      1
                    ]
                  }
                }
              },
              "db_external": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "External database connectivity",
                "properties": {
                  "msg": {
                    "type": "string",
                    "description": "Status message",
                    "enum": [
                      "OK"
                    ]
                  },
                  "reachable": {
                    "type": "integer",
                    "description": "Broker can connect to the external database server",
                    "enum": [
                      1
                    ]
                  }
                }
              },
              "db_internal": {
                "type": "object",
                "description": "Internal database connectivity",
                "properties": {
                  "msg": {
                    "type": "string",
                    "description": "Status message",
                    "enum": [
                      "OK"
                    ]
                  },
                  "reachable": {
                    "type": "integer",
                    "description": "Broker can connect to the internal database server",
                    "enum": [
                      1
                    ]
                  }
                }
              },
              "load": {
                "type": "object",
                "description": "System load average.\n\n`null` values if failure to retrieve system load.\n",
                "properties": {
                  "msg": {
                    "type": "string",
                    "description": "Status message. `high load` when the `avg_1` is > 4.",
                    "enum": [
                      "OK",
                      "high load",
                      "unable to retrieve loadavg"
                    ]
                  },
                  "avg_1": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "description": "1-minute load average."
                  },
                  "avg_5": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "description": "5-minute load average"
                  },
                  "avg_15": {
                    "type": [
                      "number",
                      "null"
                    ],
                    "description": "15-minute load average"
                  }
                }
              },
              "redis": {
                "type": "object",
                "description": "Redis server running state",
                "properties": {
                  "msg": {
                    "type": "string",
                    "description": "Status message",
                    "enum": [
                      "OK"
                    ]
                  },
                  "running": {
                    "type": "integer",
                    "description": "Redis server is running",
                    "enum": [
                      1
                    ]
                  }
                }
              },
              "work_queue": {
                "type": "object",
                "description": "Work queue running state",
                "properties": {
                  "msg": {
                    "type": "string",
                    "description": "Status message",
                    "enum": [
                      "OK",
                      "not running"
                    ]
                  },
                  "running": {
                    "type": "integer",
                    "description": "Work queue is running",
                    "enum": [
                      0,
                      1
                    ]
                  }
                }
              }
            }
          },
          "broker": {
            "type": "object",
            "description": "Additional information about the broker this response was served from.",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "The broker's FQDN"
              },
              "msg": {
                "type": "string",
                "description": "Broker status message. `OK` when all critical components `OK`.",
                "enum": [
                  "OK",
                  "not OK"
                ]
              }
            }
          }
        }
      },
      "schema": {
        "type": "object",
        "title": "SERVICE_UNAVAILABLE",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "SERVICE_UNAVAILABLE"
          },
          "error_message": {
            "type": "string",
            "const": "Service unavailable"
          }
        }
      },
      "UserAdd": {
        "title": "User",
        "description": "User object data for insert\n",
        "type": "object",
        "required": [
          "user_login",
          "name",
          "is_local"
        ],
        "properties": {
          "is_local": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1,
            "description": "When '1' the user is authenticated locally by the Connection Broker.\n\nWhen '0' then specify 'auth_server', the authentication server that\ncontains the user.\n"
          },
          "user_login": {
            "type": "string",
            "maxLength": 64,
            "description": "User login name.\n"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "The user's display name.\n"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 3,
            "maxLength": 100,
            "description": "User login password (required for 'local' user).\n"
          },
          "auth_server": {
            "type": "string",
            "maxLength": 100,
            "description": "Authentication server that contains the user\n(required for non-local user)\n"
          },
          "role_name": {
            "type": "string",
            "maxLength": 100,
            "description": "The role to assign to the user (defaults to \"User\")\n"
          },
          "policy_name": {
            "type": "string",
            "maxLength": 100,
            "description": "The policy to assign to the user (defaults to \"Default\")\n"
          },
          "notes": {
            "type": "string",
            "maxLength": 4000,
            "description": "Optional notes to store with the user record.\n"
          }
        }
      },
      "RespUserCreated": {
        "title": "stored User response",
        "allOf": [
          {
            "$ref": "#/components/schemas/RespStandard"
          },
          {
            "type": "object",
            "properties": {
              "stored_data": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The user's unique identifier\n"
                  }
                }
              }
            }
          }
        ]
      },
      "UserExists": {
        "type": "object",
        "title": "UserExists",
        "description": "##### Field 'error_status' is EXISTS_ALREADY\n\nThe operation was not successful: this 'user_login' exists already\n",
        "required": [
          "error_status",
          "error_message"
        ],
        "properties": {
          "error_status": {
            "type": "string",
            "const": "EXISTS_ALREADY"
          },
          "error_message": {
            "type": "string",
            "description": "Contains additional details about the error.\n"
          }
        }
      }
    },
    "examples": {
      "center_array": {
        "summary": "Center List example",
        "value": [
          {
            "id": 2,
            "name": "Some Local Center",
            "flavor": "I",
            "online": 0,
            "os": "",
            "status": 2,
            "status_label": "Offline",
            "type": "vcenter",
            "type_label": "VMware vSphere and vCenter Server"
          },
          {
            "id": 4,
            "name": "Azure Center",
            "flavor": "J",
            "online": 1,
            "os": "",
            "status": 1,
            "status_label": "Online",
            "type": "azure",
            "type_label": "Microsoft Azure"
          }
        ]
      },
      "ActiveDirectoryCenterAdd": {
        "summary": "Active Directory Center Add",
        "value": {
          "center_definition": {
            "ldap_subtree": "DC=example,DC=com",
            "allow_rogue": 0,
            "ldap_filter": "",
            "continuous_autotag": 0,
            "offer_vms": 1,
            "notes": "",
            "short_hostname_lookup": 0,
            "init_unavailable": 0,
            "name": "AD Center REST",
            "remote_authentication_id": 2,
            "poll_power_state_interval": 0,
            "poll_interval": 0,
            "allow_rogue_policy_id": 3
          }
        }
      },
      "RespActiveDirectoryCenterCreated": {
        "summary": "Active Directory Center Created",
        "value": {
          "stored_data": {
            "active": 1,
            "center_definition": {
              "allow_rogue": 0,
              "allow_rogue_policy_id": 3,
              "attached_role": "",
              "continuous_autotag": 0,
              "enable_syslog": 1,
              "enable_syslog_relay": 0,
              "flavor": "A",
              "gateway_id": 0,
              "init_unavailable": 0,
              "ip": "",
              "ldap_filter": "",
              "ldap_subtree": "DC=example,DC=com",
              "max_remote_desktop_sessions": 0,
              "name": "AD Center REST",
              "new_as_deletable": 0,
              "notes": "",
              "offer_vms": 1,
              "pcoip_ssh_password": "**********",
              "poll_interval": 0,
              "poll_power_state_interval": 0,
              "proxy_address": "",
              "remote_authentication_id": 2,
              "rpc_port": 389,
              "short_hostname_lookup": 0,
              "syslog_forward_to_addr": "",
              "type": "active_directory",
              "type_label": "Active Directory",
              "vc_auth_method": "",
              "vc_custom_fields": [],
              "vc_datacenter": "",
              "vc_domain": "",
              "vc_name": "",
              "vc_password": "**********",
              "vc_project_domain": "",
              "vc_url": "ad.example.com",
              "vc_version": "",
              "vm_id": null,
              "wait_inst_status": 1,
              "wait_sys_status": 1
            },
            "center_info": {
              "agent_instance_uuid": "",
              "agent_token": "",
              "agent_uuid": "",
              "agent_version": "",
              "ldap_attributes": [],
              "ldap_attributes_updated": "",
              "os": "",
              "os_version": ""
            },
            "created": "2023-11-14 06:26:00",
            "id": 37,
            "images": [],
            "needs_upgrade": 0,
            "online": 1,
            "product_id": 0,
            "status": 1,
            "status_label": "Online",
            "updated": "2023-11-14 06:26:00",
            "uuid": "8b711ab6-8453-4637-8316-928a00d3c8b4"
          }
        }
      },
      "PolicyInsertNotUnique": {
        "summary": "policies.insert 409 NotUnique example",
        "value": {
          "error_message": "Listed fields should contain only unique values",
          "error_status": "NOT_UNIQUE",
          "items": [
            "name"
          ]
        }
      },
      "AWSCenterAdd": {
        "summary": "AWS Center Add",
        "value": {
          "center_definition": {
            "allow_rogue": 0,
            "allow_rogue_policy_id": 3,
            "continuous_autotag": 1,
            "init_unavailable": 0,
            "name": "AWS Center REST",
            "new_as_deletable": 0,
            "notes": "",
            "offer_vms": 1,
            "poll_interval": 0,
            "proxy_address": "",
            "type": "amazon",
            "vc_auth_method": "access_key",
            "vc_datacenter": "us-east-1",
            "vc_name": "AccessKeyID000000000",
            "vc_password": "VerySecretAccessKey",
            "wait_inst_status": 1,
            "wait_sys_status": 1
          }
        }
      },
      "RespAWSCenterCreated": {
        "summary": "AWS Center Created",
        "value": {
          "stored_data": {
            "active": 1,
            "center_definition": {
              "allow_rogue": 0,
              "allow_rogue_policy_id": 3,
              "attached_role": "",
              "continuous_autotag": 1,
              "enable_syslog": 1,
              "enable_syslog_relay": 0,
              "flavor": "Z",
              "gateway_id": 0,
              "init_unavailable": 0,
              "ip": "",
              "ldap_filter": "",
              "ldap_subtree": "",
              "max_remote_desktop_sessions": 0,
              "name": "AWS Center REST",
              "new_as_deletable": 0,
              "notes": "",
              "offer_vms": 1,
              "pcoip_ssh_password": "**********",
              "poll_interval": 0,
              "poll_power_state_interval": 0,
              "proxy_address": "",
              "remote_authentication_id": 0,
              "rpc_port": 0,
              "short_hostname_lookup": 0,
              "syslog_forward_to_addr": "",
              "type": "amazon",
              "type_label": "Amazon Web Services",
              "vc_auth_method": "access_key",
              "vc_custom_fields": [],
              "vc_datacenter": "us-east-1",
              "vc_domain": "",
              "vc_name": "AccessKeyID000000000",
              "vc_password": "**********",
              "vc_project_domain": "",
              "vc_url": "",
              "vc_version": "",
              "vm_id": null,
              "wait_inst_status": 1,
              "wait_sys_status": 1
            },
            "center_info": {
              "agent_instance_uuid": "",
              "agent_token": "",
              "agent_uuid": "",
              "agent_version": "",
              "aws_sec_groups": [
                {
                  "gDesc": "launch-wizard-1 created 2023-10-19T15:26:43.553Z",
                  "gId": "sg-00000000000000000",
                  "gName": "launch-wizard-1",
                  "vpcId": "vpc-00a00000"
                },
                {
                  "gDesc": "launch-wizard-2 created 2023-10-20T15:58:35.900Z",
                  "gId": "sg-11111111111111111",
                  "gName": "launch-wizard-2",
                  "vpcId": "vpc-11a11111"
                }
              ],
              "aws_sizes": [
                "a1.2xlarge",
                "a1.4xlarge",
                "a1.large",
                "a1.medium",
                "a1.xlarge",
                ".......",
                "z1d.12xlarge",
                "z1d.2xlarge",
                "z1d.3xlarge",
                "z1d.6xlarge",
                "z1d.large",
                "z1d.xlarge"
              ],
              "aws_sub_nets": [
                "subnet-a0000001/vpc-00a00000/us-east-1f/",
                "subnet-b0000002/vpc-11a11111/us-east-1e/Desktop Private subnet",
                "subnet-c0000003/vpc-11a11111/us-east-1a/Gateway Public subnet"
              ],
              "os": "Amazon Web Services",
              "os_version": ""
            },
            "created": "2023-11-20 13:50:57",
            "id": 48,
            "images": [
              {
                "id": 2000,
                "name": "AmazonLinux2022"
              },
              {
                "id": 2001,
                "name": "My Great Image"
              }
            ],
            "needs_upgrade": 0,
            "online": 1,
            "product_id": 0,
            "status": 1,
            "status_label": "Online",
            "updated": "2023-11-21 06:54:56",
            "uuid": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "UncategorizedCenterAdd": {
        "summary": "Uncategorized Center Add",
        "value": {
          "center_definition": {
            "name": "Enrolled Desktops Center REST",
            "notes": ""
          }
        }
      },
      "RespUncategorizedCenterCreated": {
        "summary": "Uncategorized Center Created",
        "value": {
          "stored_data": {
            "active": 1,
            "center_definition": {
              "allow_rogue": 0,
              "allow_rogue_policy_id": 0,
              "attached_role": "",
              "continuous_autotag": 0,
              "enable_syslog": 1,
              "enable_syslog_relay": 0,
              "flavor": "U",
              "gateway_id": 0,
              "init_unavailable": 0,
              "ip": "",
              "ldap_filter": "",
              "ldap_subtree": "",
              "max_remote_desktop_sessions": 0,
              "name": "Enrolled Desktops Center REST",
              "new_as_deletable": 0,
              "notes": "",
              "offer_vms": 1,
              "pcoip_ssh_password": "**********",
              "poll_interval": 0,
              "poll_power_state_interval": 0,
              "proxy_address": "",
              "remote_authentication_id": 0,
              "rpc_port": 0,
              "short_hostname_lookup": 0,
              "syslog_forward_to_addr": "",
              "type": "uncategorized",
              "type_label": "Uncategorized Desktops",
              "vc_auth_method": "",
              "vc_custom_fields": [],
              "vc_datacenter": "",
              "vc_domain": "",
              "vc_name": "",
              "vc_password": "**********",
              "vc_project_domain": "",
              "vc_url": "",
              "vc_version": "",
              "vm_id": null,
              "wait_inst_status": 1,
              "wait_sys_status": 1
            },
            "center_info": {
              "agent_instance_uuid": "",
              "agent_token": "",
              "agent_uuid": "",
              "agent_version": "",
              "os": "",
              "os_version": ""
            },
            "created": "2023-11-13 10:48:57",
            "id": 36,
            "images": [],
            "needs_upgrade": 0,
            "online": 1,
            "product_id": 0,
            "status": 5,
            "status_label": "Scanning",
            "updated": "2023-11-13 10:48:57",
            "uuid": "9e30d30c-ce73-4eb3-a56e-4d2b22affd3c"
          }
        }
      },
      "VMwareCenterAdd": {
        "summary": "VMware vSphere and vCenter Center Add",
        "value": {
          "center_definition": {
            "allow_rogue": 0,
            "continuous_autotag": 0,
            "init_unavailable": 0,
            "name": "Vcenter REST",
            "notes": "",
            "offer_vms": 1,
            "poll_interval": 0,
            "vc_name": "VcenterAdmin",
            "vc_password": "VerySecurePassword",
            "vc_url": "vcenter.example.com"
          }
        }
      },
      "RespVMwareCenterCreated": {
        "summary": "VMware vSphere and vCenter Center Created",
        "value": {
          "stored_data": {
            "active": 1,
            "center_definition": {
              "allow_rogue": 0,
              "allow_rogue_policy_id": 3,
              "attached_role": "",
              "continuous_autotag": 0,
              "enable_syslog": 1,
              "enable_syslog_relay": 0,
              "filter_by_tag_rules": 0,
              "flavor": "I",
              "gateway_id": 0,
              "init_unavailable": 0,
              "ip": "vcenter.example.com",
              "ldap_filter": "",
              "ldap_subtree": "",
              "max_remote_desktop_sessions": 0,
              "name": "Vcenter REST",
              "new_as_deletable": 0,
              "notes": "",
              "offer_vms": 1,
              "pcoip_ssh_password": "**********",
              "poll_interval": 0,
              "poll_power_state_interval": 0,
              "proxy_address": "",
              "remote_authentication_id": 0,
              "rpc_port": 0,
              "short_hostname_lookup": 0,
              "syslog_forward_to_addr": "",
              "tag_rules_join": "O",
              "type": "vcenter",
              "type_label": "VMware vSphere and vCenter Server",
              "vc_auth_method": "",
              "vc_custom_fields": [
                "AutoDeploy.MachineIdentity",
                "com.vmware.vcIntegrity.customField.scheduledTask.action",
                "com.vmware.vcIntegrity.customField.scheduledTask.signature",
                "com.vmware.vcIntegrity.customField.scheduledTask.target",
                "com.vmware.vcenter.cluster.edrs.upgradeHostAdded"
              ],
              "vc_datacenter": "ExampleDatacenter",
              "vc_domain": "",
              "vc_name": "VcenterAdmin",
              "vc_password": "**********",
              "vc_project_domain": "",
              "vc_url": "vcenter.example.com",
              "vc_version": "",
              "vm_id": 0,
              "wait_inst_status": 1,
              "wait_sys_status": 1
            },
            "center_info": {
              "agent_instance_uuid": "",
              "agent_token": "",
              "agent_uuid": "",
              "agent_version": "1.0.0.0",
              "api_version": "8.0.0.1",
              "os": "VMware vCenter Server 8.0.0 build-21216066",
              "os_version": "",
              "vc_clusters": [
                {
                  "id": 1,
                  "name": "QA",
                  "vc_moref": "domain-c01"
                },
                {
                  "id": 2,
                  "name": "Mac",
                  "vc_moref": "domain-c02"
                },
                {
                  "id": 6,
                  "name": "Win",
                  "vc_moref": "domain-c06"
                }
              ],
              "vc_datastores": [
                {
                  "capability": "thick",
                  "capacity": "11508029325312",
                  "flavor": "NFS41",
                  "free_space": "2058423320576",
                  "hosts": "host-658,host-12,host-14",
                  "id": 12,
                  "label": "DC 3 : Depot Datastore [1917.06 GB free / 10717.69 GB total]",
                  "name": "Depot Datastore"
                },
                {
                  "capability": "thick,thin",
                  "capacity": "374467461120",
                  "flavor": "VMFS",
                  "free_space": "372953317376",
                  "hosts": "host-596",
                  "id": 1,
                  "label": "DC 3 : Good datastore [347.34 GB free / 348.75 GB total]",
                  "name": "Good datastore"
                },
                {
                  "capability": "thick,thin",
                  "capacity": "959388319744",
                  "flavor": "VMFS",
                  "free_space": "690340495360",
                  "hosts": "host-596",
                  "id": 19,
                  "label": "DC 1 : RAID [642.93 GB free / 893.50 GB total]",
                  "name": "RAID"
                }
              ],
              "vc_folders": [
                {
                  "level": 0,
                  "name": "DC 1 (datacenter)",
                  "vc_moref": "group-v3",
                  "children": [
                    {
                      "level": 1,
                      "name": "Test",
                      "vc_moref": "group-v25",
                      "children": [
                        {
                          "level": 2,
                          "name": "Brokers",
                          "vc_moref": "group-v526",
                          "children": []
                        },
                        {
                          "level": 2,
                          "name": "Linux",
                          "vc_moref": "group-v527",
                          "children": []
                        },
                        {
                          "level": 2,
                          "name": "Windows",
                          "vc_moref": "group-v528",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "level": 0,
                  "name": "DC 3 (datacenter)",
                  "vc_moref": "group-v4",
                  "children": [
                    {
                      "level": 1,
                      "name": "Dev",
                      "vc_moref": "group-v112",
                      "children": [
                        {
                          "level": 2,
                          "name": "Alex",
                          "vc_moref": "group-v213",
                          "children": [
                            {
                              "level": 3,
                              "name": "Desktops",
                              "vc_moref": "group-v542",
                              "children": []
                            },
                            {
                              "level": 3,
                              "name": "Templates",
                              "vc_moref": "group-v541",
                              "children": []
                            }
                          ]
                        },
                        {
                          "level": 2,
                          "name": "Bob",
                          "vc_moref": "group-v214",
                          "children": []
                        },
                        {
                          "level": 2,
                          "name": "Charlie",
                          "vc_moref": "group-v223",
                          "children": []
                        },
                        {
                          "level": 2,
                          "name": "Shared",
                          "vc_moref": "group-v331",
                          "children": []
                        }
                      ]
                    },
                    {
                      "level": 1,
                      "name": "IT",
                      "vc_moref": "group-v470",
                      "children": []
                    }
                  ]
                }
              ],
              "vc_resource_pools": [
                {
                  "id": 20,
                  "name": "[host default] GPU Resource Pool"
                },
                {
                  "id": 21,
                  "name": "[host default] Resources"
                },
                {
                  "id": 22,
                  "name": "[Win] Resources"
                },
                {
                  "id": 23,
                  "name": "[Mac] Resources"
                }
              ],
              "vc_spec_files": [
                {
                  "id": 9,
                  "name": "my-spec-example"
                }
              ]
            },
            "created": "2024-01-29 11:47:38",
            "id": 55,
            "images": [
              {
                "id": 2101,
                "name": "W11-Template"
              },
              {
                "id": 2102,
                "name": "My Image"
              },
              {
                "id": 2103,
                "name": "Rocky 8 Minimal"
              }
            ],
            "needs_upgrade": 0,
            "online": 1,
            "product_id": 9,
            "status": 1,
            "status_label": "Online",
            "updated": "2024-01-30 11:51:01",
            "uuid": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "center_data": {
        "summary": "Center object example",
        "value": {
          "active": 1,
          "center_definition": {
            "allow_rogue": 0,
            "allow_rogue_policy_id": 1,
            "continuous_autotag": 0,
            "enable_syslog": 1,
            "enable_syslog_relay": 0,
            "flavor": "A",
            "gateway_id": 0,
            "init_unavailable": 0,
            "ip": "",
            "ldap_filter": "",
            "ldap_subtree": "DC=example, DC=com",
            "max_remote_desktop_sessions": 0,
            "name": "AD Center",
            "new_as_deletable": 0,
            "notes": "",
            "offer_vms": 1,
            "poll_interval": 0,
            "poll_power_state_interval": 0,
            "proxy_address": "",
            "remote_authentication_id": 1,
            "rpc_port": 389,
            "short_hostname_lookup": 0,
            "syslog_forward_to_addr": "",
            "type": "active_directory",
            "type_label": "Active Directory",
            "vc_custom_fields": [],
            "vc_datacenter": "",
            "vc_domain": "",
            "vc_name": "",
            "vc_password": "********",
            "vc_project_domain": "",
            "vc_url": "AD.example.com",
            "vc_version": "",
            "vm_id": null,
            "wait_inst_status": 1,
            "wait_sys_status": 1
          },
          "center_info": {
            "agent_instance_uuid": "",
            "agent_token": "",
            "agent_uuid": "",
            "agent_version": "",
            "ldap_attributes": [
              "cn",
              "codePage",
              "countryCode",
              "dNSHostName",
              "description",
              "displayName",
              "distinguishedName",
              "instanceType",
              "location",
              "managedBy",
              "memberOf",
              "msDFSR-ComputerReferenceBL",
              "name",
              "networkAddress",
              "objectCategory",
              "objectClass",
              "objectGUID",
              "operatingSystem",
              "operatingSystemServicePack",
              "operatingSystemVersion",
              "primaryGroupID",
              "rIDSetReferences",
              "sAMAccountName",
              "sAMAccountType",
              "serverReferenceBL",
              "servicePrincipalName"
            ],
            "ldap_attributes_updated": "2021-09-24 14:31:32",
            "os": "",
            "os_version": ""
          },
          "created": "2021-09-24 14:30:33",
          "id": 9,
          "images": [],
          "needs_upgrade": 0,
          "online": 1,
          "product_id": 0,
          "status": 1,
          "status_label": "Online",
          "updated": "2021-09-24 14:31:32",
          "uuid": "00000000-0000-0000-0000-000000000000"
        }
      },
      "ActiveDirectoryCenter": {
        "summary": "Active Directory Center",
        "value": {
          "active": 1,
          "center_definition": {
            "allow_rogue": 0,
            "allow_rogue_policy_id": 3,
            "attached_role": "",
            "continuous_autotag": 0,
            "enable_syslog": 1,
            "enable_syslog_relay": 0,
            "flavor": "A",
            "gateway_id": 0,
            "init_unavailable": 0,
            "ip": "",
            "ldap_filter": "",
            "ldap_subtree": "DC=example,DC=com",
            "max_remote_desktop_sessions": 0,
            "name": "AD Center REST",
            "new_as_deletable": 0,
            "notes": "",
            "offer_vms": 1,
            "pcoip_ssh_password": "**********",
            "poll_interval": 0,
            "poll_power_state_interval": 0,
            "proxy_address": "",
            "remote_authentication_id": 2,
            "rpc_port": 389,
            "short_hostname_lookup": 0,
            "syslog_forward_to_addr": "",
            "type": "active_directory",
            "type_label": "Active Directory",
            "vc_auth_method": "",
            "vc_custom_fields": [],
            "vc_datacenter": "",
            "vc_domain": "",
            "vc_name": "",
            "vc_password": "**********",
            "vc_project_domain": "",
            "vc_url": "ad.example.com",
            "vc_version": "",
            "vm_id": null,
            "wait_inst_status": 1,
            "wait_sys_status": 1
          },
          "center_info": {
            "agent_instance_uuid": "",
            "agent_token": "",
            "agent_uuid": "",
            "agent_version": "",
            "ldap_attributes": [],
            "ldap_attributes_updated": "",
            "os": "",
            "os_version": ""
          },
          "created": "2023-11-14 06:26:00",
          "id": 37,
          "images": [],
          "needs_upgrade": 0,
          "online": 1,
          "product_id": 0,
          "status": 1,
          "status_label": "Online",
          "updated": "2023-11-14 06:26:00",
          "uuid": "8b711ab6-8453-4637-8316-928a00d3c8b4"
        }
      },
      "AWSCenter": {
        "summary": "AWS Center",
        "value": {
          "active": 1,
          "center_definition": {
            "allow_rogue": 0,
            "allow_rogue_policy_id": 3,
            "attached_role": "",
            "continuous_autotag": 1,
            "enable_syslog": 1,
            "enable_syslog_relay": 0,
            "flavor": "Z",
            "gateway_id": 0,
            "init_unavailable": 0,
            "ip": "",
            "ldap_filter": "",
            "ldap_subtree": "",
            "max_remote_desktop_sessions": 0,
            "name": "AWS Center REST",
            "new_as_deletable": 0,
            "notes": "",
            "offer_vms": 1,
            "pcoip_ssh_password": "**********",
            "poll_interval": 0,
            "poll_power_state_interval": 0,
            "proxy_address": "",
            "remote_authentication_id": 0,
            "rpc_port": 0,
            "short_hostname_lookup": 0,
            "syslog_forward_to_addr": "",
            "type": "amazon",
            "type_label": "Amazon Web Services",
            "vc_auth_method": "access_key",
            "vc_custom_fields": [],
            "vc_datacenter": "us-east-1",
            "vc_domain": "",
            "vc_name": "AccessKeyID000000000",
            "vc_password": "**********",
            "vc_project_domain": "",
            "vc_url": "",
            "vc_version": "",
            "vm_id": null,
            "wait_inst_status": 1,
            "wait_sys_status": 1
          },
          "center_info": {
            "agent_instance_uuid": "",
            "agent_token": "",
            "agent_uuid": "",
            "agent_version": "",
            "aws_sec_groups": [
              {
                "gDesc": "launch-wizard-1 created 2023-10-19T15:26:43.553Z",
                "gId": "sg-00000000000000000",
                "gName": "launch-wizard-1",
                "vpcId": "vpc-00a00000"
              },
              {
                "gDesc": "launch-wizard-2 created 2023-10-20T15:58:35.900Z",
                "gId": "sg-11111111111111111",
                "gName": "launch-wizard-2",
                "vpcId": "vpc-11a11111"
              }
            ],
            "aws_sizes": [
              "a1.2xlarge",
              "a1.4xlarge",
              "a1.large",
              "a1.medium",
              "a1.xlarge",
              ".......",
              "z1d.12xlarge",
              "z1d.2xlarge",
              "z1d.3xlarge",
              "z1d.6xlarge",
              "z1d.large",
              "z1d.xlarge"
            ],
            "aws_sub_nets": [
              "subnet-a0000001/vpc-00a00000/us-east-1f/",
              "subnet-b0000002/vpc-11a11111/us-east-1e/Desktop Private subnet",
              "subnet-c0000003/vpc-11a11111/us-east-1a/Gateway Public subnet"
            ],
            "os": "Amazon Web Services",
            "os_version": ""
          },
          "created": "2023-11-20 13:50:57",
          "id": 48,
          "images": [
            {
              "id": 2000,
              "name": "AmazonLinux2022"
            },
            {
              "id": 2001,
              "name": "My Great Image"
            }
          ],
          "needs_upgrade": 0,
          "online": 1,
          "product_id": 0,
          "status": 1,
          "status_label": "Online",
          "updated": "2023-11-21 06:54:56",
          "uuid": "00000000-0000-0000-0000-000000000000"
        }
      },
      "UncategorizedCenter": {
        "summary": "Uncategorized Center",
        "value": {
          "active": 1,
          "center_definition": {
            "allow_rogue": 0,
            "allow_rogue_policy_id": 0,
            "attached_role": "",
            "continuous_autotag": 0,
            "enable_syslog": 1,
            "enable_syslog_relay": 0,
            "flavor": "U",
            "gateway_id": 0,
            "init_unavailable": 0,
            "ip": "",
            "ldap_filter": "",
            "ldap_subtree": "",
            "max_remote_desktop_sessions": 0,
            "name": "Enrolled Desktops Center REST",
            "new_as_deletable": 0,
            "notes": "",
            "offer_vms": 1,
            "pcoip_ssh_password": "**********",
            "poll_interval": 0,
            "poll_power_state_interval": 0,
            "proxy_address": "",
            "remote_authentication_id": 0,
            "rpc_port": 0,
            "short_hostname_lookup": 0,
            "syslog_forward_to_addr": "",
            "type": "uncategorized",
            "type_label": "Uncategorized Desktops",
            "vc_auth_method": "",
            "vc_custom_fields": [],
            "vc_datacenter": "",
            "vc_domain": "",
            "vc_name": "",
            "vc_password": "**********",
            "vc_project_domain": "",
            "vc_url": "",
            "vc_version": "",
            "vm_id": null,
            "wait_inst_status": 1,
            "wait_sys_status": 1
          },
          "center_info": {
            "agent_instance_uuid": "",
            "agent_token": "",
            "agent_uuid": "",
            "agent_version": "",
            "os": "",
            "os_version": ""
          },
          "created": "2023-11-13 10:48:57",
          "id": 36,
          "images": [],
          "needs_upgrade": 0,
          "online": 1,
          "product_id": 0,
          "status": 5,
          "status_label": "Scanning",
          "updated": "2023-11-13 10:48:57",
          "uuid": "9e30d30c-ce73-4eb3-a56e-4d2b22affd3c"
        }
      },
      "VMwareCenter": {
        "summary": "VMware vSphere and vCenter Center",
        "value": {
          "active": 1,
          "center_definition": {
            "allow_rogue": 0,
            "allow_rogue_policy_id": 3,
            "attached_role": "",
            "continuous_autotag": 0,
            "enable_syslog": 1,
            "enable_syslog_relay": 0,
            "filter_by_tag_rules": 0,
            "flavor": "I",
            "gateway_id": 0,
            "init_unavailable": 0,
            "ip": "vcenter.example.com",
            "ldap_filter": "",
            "ldap_subtree": "",
            "max_remote_desktop_sessions": 0,
            "name": "Vcenter REST",
            "new_as_deletable": 0,
            "notes": "",
            "offer_vms": 1,
            "pcoip_ssh_password": "**********",
            "poll_interval": 0,
            "poll_power_state_interval": 0,
            "proxy_address": "",
            "remote_authentication_id": 0,
            "rpc_port": 0,
            "short_hostname_lookup": 0,
            "syslog_forward_to_addr": "",
            "tag_rules_join": "O",
            "type": "vcenter",
            "type_label": "VMware vSphere and vCenter Server",
            "vc_auth_method": "",
            "vc_custom_fields": [
              "AutoDeploy.MachineIdentity",
              "com.vmware.vcIntegrity.customField.scheduledTask.action",
              "com.vmware.vcIntegrity.customField.scheduledTask.signature",
              "com.vmware.vcIntegrity.customField.scheduledTask.target",
              "com.vmware.vcenter.cluster.edrs.upgradeHostAdded"
            ],
            "vc_datacenter": "ExampleDatacenter",
            "vc_domain": "",
            "vc_name": "VcenterAdmin",
            "vc_password": "**********",
            "vc_project_domain": "",
            "vc_url": "vcenter.example.com",
            "vc_version": "",
            "vm_id": 0,
            "wait_inst_status": 1,
            "wait_sys_status": 1
          },
          "center_info": {
            "agent_instance_uuid": "",
            "agent_token": "",
            "agent_uuid": "",
            "agent_version": "1.0.0.0",
            "api_version": "8.0.0.1",
            "os": "VMware vCenter Server 8.0.0 build-21216066",
            "os_version": "",
            "vc_clusters": [
              {
                "id": 1,
                "name": "QA",
                "vc_moref": "domain-c01"
              },
              {
                "id": 2,
                "name": "Mac",
                "vc_moref": "domain-c02"
              },
              {
                "id": 6,
                "name": "Win",
                "vc_moref": "domain-c06"
              }
            ],
            "vc_datastores": [
              {
                "capability": "thick",
                "capacity": "11508029325312",
                "flavor": "NFS41",
                "free_space": "2058423320576",
                "hosts": "host-658,host-12,host-14",
                "id": 12,
                "label": "DC 3 : Depot Datastore [1917.06 GB free / 10717.69 GB total]",
                "name": "Depot Datastore"
              },
              {
                "capability": "thick,thin",
                "capacity": "374467461120",
                "flavor": "VMFS",
                "free_space": "372953317376",
                "hosts": "host-596",
                "id": 1,
                "label": "DC 3 : Good datastore [347.34 GB free / 348.75 GB total]",
                "name": "Good datastore"
              },
              {
                "capability": "thick,thin",
                "capacity": "959388319744",
                "flavor": "VMFS",
                "free_space": "690340495360",
                "hosts": "host-596",
                "id": 19,
                "label": "DC 1 : RAID [642.93 GB free / 893.50 GB total]",
                "name": "RAID"
              }
            ],
            "vc_folders": [
              {
                "level": 0,
                "name": "DC 1 (datacenter)",
                "vc_moref": "group-v3",
                "children": [
                  {
                    "level": 1,
                    "name": "Test",
                    "vc_moref": "group-v25",
                    "children": [
                      {
                        "level": 2,
                        "name": "Brokers",
                        "vc_moref": "group-v526",
                        "children": []
                      },
                      {
                        "level": 2,
                        "name": "Linux",
                        "vc_moref": "group-v527",
                        "children": []
                      },
                      {
                        "level": 2,
                        "name": "Windows",
                        "vc_moref": "group-v528",
                        "children": []
                      }
                    ]
                  }
                ]
              },
              {
                "level": 0,
                "name": "DC 3 (datacenter)",
                "vc_moref": "group-v4",
                "children": [
                  {
                    "level": 1,
                    "name": "Dev",
                    "vc_moref": "group-v112",
                    "children": [
                      {
                        "level": 2,
                        "name": "Alex",
                        "vc_moref": "group-v213",
                        "children": [
                          {
                            "level": 3,
                            "name": "Desktops",
                            "vc_moref": "group-v542",
                            "children": []
                          },
                          {
                            "level": 3,
                            "name": "Templates",
                            "vc_moref": "group-v541",
                            "children": []
                          }
                        ]
                      },
                      {
                        "level": 2,
                        "name": "Bob",
                        "vc_moref": "group-v214",
                        "children": []
                      },
                      {
                        "level": 2,
                        "name": "Charlie",
                        "vc_moref": "group-v223",
                        "children": []
                      },
                      {
                        "level": 2,
                        "name": "Shared",
                        "vc_moref": "group-v331",
                        "children": []
                      }
                    ]
                  },
                  {
                    "level": 1,
                    "name": "IT",
                    "vc_moref": "group-v470",
                    "children": []
                  }
                ]
              }
            ],
            "vc_resource_pools": [
              {
                "id": 20,
                "name": "[host default] GPU Resource Pool"
              },
              {
                "id": 21,
                "name": "[host default] Resources"
              },
              {
                "id": 22,
                "name": "[Win] Resources"
              },
              {
                "id": 23,
                "name": "[Mac] Resources"
              }
            ],
            "vc_spec_files": [
              {
                "id": 9,
                "name": "my-spec-example"
              }
            ]
          },
          "created": "2024-01-29 11:47:38",
          "id": 55,
          "images": [
            {
              "id": 2101,
              "name": "W11-Template"
            },
            {
              "id": 2102,
              "name": "My Image"
            },
            {
              "id": 2103,
              "name": "Rocky 8 Minimal"
            }
          ],
          "needs_upgrade": 0,
          "online": 1,
          "product_id": 9,
          "status": 1,
          "status_label": "Online",
          "updated": "2024-01-30 11:51:01",
          "uuid": "00000000-0000-0000-0000-000000000000"
        }
      },
      "RespCenterScan": {
        "summary": "Center Scan",
        "value": {
          "is_scanning": 1,
          "job_id": 1000,
          "message": "A job to scan the \"Enrolled Desktops\" center was successfully submitted"
        }
      },
      "ActiveDirectoryCenterUpdate": {
        "summary": "Active Directory Center Update",
        "value": {
          "center_definition": {
            "ldap_subtree": "DC=example2,DC=com",
            "short_hostname_lookup": 1
          }
        }
      },
      "AWSCenterUpdate": {
        "summary": "AWS Center Update",
        "value": {
          "center_definition": {
            "name": "AWS Center REST Upd",
            "new_as_deletable": 0,
            "notes": "Updated"
          }
        }
      },
      "UncategorizedCenterUpdate": {
        "summary": "Uncategorized Center Update",
        "value": {
          "center_definition": {
            "name": "Enrolled Desktops Center REST",
            "notes": ""
          }
        }
      },
      "VMwareCenterUpdate": {
        "summary": "VMware vSphere and vCenter Center Update",
        "value": {
          "center_definition": {
            "name": "Vcenter REST Upd",
            "vc_datacenter": "ExampleDatacenter",
            "notes": "Updated"
          }
        }
      },
      "ESX_Servers_array": {
        "summary": "Managed ESX Servers List example",
        "value": [
          {
            "id": 10,
            "max_vms": 0,
            "name": "esx-a.vcenter.example.com",
            "vc_moref": "host-14"
          },
          {
            "id": 9,
            "max_vms": 2,
            "name": "esx-b.vcenter.example.com",
            "vc_moref": "host-12"
          },
          {
            "id": 14,
            "max_vms": 0,
            "name": "esx-qa.vcenter.example.com",
            "vc_moref": "host-23"
          }
        ]
      },
      "ESX_Servers_update_array": {
        "summary": "Managed ESX Servers Update List example",
        "value": [
          {
            "max_vms": 0,
            "name": "esx-a.vcenter.example.com",
            "vc_moref": "host-14"
          },
          {
            "max_vms": 2,
            "name": "esx-b.vcenter.example.com",
            "vc_moref": "host-12"
          },
          {
            "max_vms": 0,
            "name": "esx-qa.vcenter.example.com",
            "vc_moref": "host-23"
          }
        ]
      },
      "RespESXServersUpdated": {
        "summary": "VMware ESX Servers Updated",
        "value": {
          "stored_ids": [
            10,
            9,
            14
          ]
        }
      },
      "gateway_array": {
        "summary": "Gateways.list default",
        "value": [
          {
            "id": 1,
            "name": "dev-gw.example.net"
          }
        ]
      },
      "GatewayAdd": {
        "summary": "Gateways.insert example",
        "value": {
          "address": "dev-gw.example.net",
          "address_private": "",
          "load_balancer_id": 0,
          "name": "dev-gw.example.net",
          "notes": "",
          "use_src_ip": 0
        }
      },
      "GatewayAddReturn": {
        "summary": "Gateways.insert stored",
        "value": {
          "stored_data": {
            "address": "dev-gw.example.net",
            "address_private": "",
            "created": "2022-10-31 13:25:58",
            "id": 1,
            "load_balancer_id": 0,
            "name": "dev-gw.example.net",
            "notes": "",
            "online": 1,
            "updated": "2022-10-31 13:25:58",
            "use_src_ip": 0,
            "version": ""
          }
        }
      },
      "gateway_data": {
        "summary": "Gateway object example",
        "value": {
          "address": "dev-gw.example.net",
          "address_private": "",
          "created": "2022-09-13 07:04:22",
          "id": 1,
          "load_balancer_id": 0,
          "name": "dev-gw.example.net",
          "notes": "",
          "online": 1,
          "updated": "2022-10-24 20:41:05",
          "use_src_ip": 0,
          "version": "2.0.0.20"
        }
      },
      "GatewayUpdate": {
        "summary": "Gateways.update example",
        "value": {
          "address": "dev-gw.example.net",
          "address_private": "192.168.30.30",
          "id": 1,
          "load_balancer_id": 0,
          "name": "dev-gw.example.net",
          "notes": "",
          "use_src_ip": 0
        }
      },
      "GatewayUpdateReturn": {
        "summary": "Gateways.update stored",
        "value": {
          "stored_data": {
            "address": "dev-gw.example.net",
            "address_private": "192.168.30.30",
            "created": "2022-10-31 13:25:58",
            "id": 1,
            "load_balancer_id": 0,
            "name": "dev-gw.example.net",
            "notes": "",
            "online": 1,
            "updated": "2022-10-31 14:10:34",
            "use_src_ip": 0,
            "version": "2.0.0.20"
          }
        }
      },
      "gateway_cluster_array": {
        "summary": "Gateway-clusters.list default",
        "value": [
          {
            "id": 6,
            "name": "Test LB 2"
          },
          {
            "id": 2,
            "name": "Test load balancer"
          }
        ]
      },
      "GatewayClusterAdd": {
        "summary": "Gateway-clusters.insert example",
        "value": {
          "address": "",
          "load_balance_via": "P",
          "name": "Test load balancer",
          "notes": "",
          "use_src_ip": 2
        }
      },
      "GatewayClusterAddReturn": {
        "summary": "Gateway-clusters.insert stored",
        "value": {
          "stored_data": {
            "address": "",
            "created": "2022-11-02 12:24:26",
            "id": 14,
            "load_balance_via": "P",
            "name": "Test load balancer",
            "notes": "",
            "updated": "2022-11-02 12:24:26",
            "use_src_ip": 2
          }
        }
      },
      "GatewayCluster_data": {
        "summary": "Gateway Cluster object example",
        "value": {
          "address": "",
          "created": "2022-11-02 12:24:26",
          "id": 2,
          "load_balance_via": "P",
          "name": "Test load balancer",
          "notes": "",
          "updated": "2022-11-09 13:58:25",
          "use_src_ip": 0
        }
      },
      "GatewayClusterUpdate": {
        "summary": "Gateway-clusters.update example",
        "value": {
          "id": 14,
          "load_balance_via": "P",
          "name": "Test load balancer 3",
          "notes": "",
          "use_src_ip": 2
        }
      },
      "GatewayClusterUpdateReturn": {
        "summary": "Gateway-clusters.update stored",
        "value": {
          "stored_data": {
            "address": "",
            "created": "2022-11-02 12:24:26",
            "id": 14,
            "load_balance_via": "P",
            "name": "Test load balancer 3",
            "notes": "",
            "updated": "2022-11-09 13:58:25",
            "use_src_ip": 2
          }
        }
      },
      "pool_array": {
        "summary": "Pools.list default",
        "value": [
          {
            "assigned_vm": 0,
            "available_vm": 115,
            "id": 1,
            "name": "All Desktops",
            "parent_pool_id": 0,
            "total_agent_running": 0,
            "total_connected": 0,
            "total_logged_in": 0,
            "total_vm": 115,
            "total_vm_running": 14,
            "total_vm_stopped": 98,
            "total_vm_suspended": 0,
            "unavailable_vm": 0
          },
          {
            "assigned_vm": 0,
            "available_vm": 44,
            "id": 5,
            "name": "All Linux Desktops",
            "parent_pool_id": 1,
            "total_agent_running": 0,
            "total_connected": 0,
            "total_logged_in": 0,
            "total_vm": 44,
            "total_vm_running": 8,
            "total_vm_stopped": 34,
            "total_vm_suspended": 0,
            "unavailable_vm": 0
          },
          {
            "assigned_vm": 0,
            "available_vm": 33,
            "id": 4,
            "name": "All Windows Desktops",
            "parent_pool_id": 1,
            "total_agent_running": 0,
            "total_connected": 0,
            "total_logged_in": 0,
            "total_vm": 33,
            "total_vm_running": 4,
            "total_vm_stopped": 29,
            "total_vm_suspended": 0,
            "unavailable_vm": 0
          }
        ]
      },
      "pools_as_tree": {
        "summary": "Pools.list with a query string '?as_tree=1&id=33'",
        "value": {
          "id": 33,
          "level": 0,
          "name": "AWS Pool",
          "parent_pool_id": 33,
          "children": [
            {
              "id": "34",
              "level": 1,
              "name": "AWS Dev desktops",
              "parent_pool_id": "33",
              "children": [
                {
                  "id": "36",
                  "level": 2,
                  "name": "AWS Pool to Provision",
                  "parent_pool_id": "34",
                  "children": []
                }
              ]
            },
            {
              "id": "35",
              "level": 1,
              "name": "AWS Dev 2",
              "parent_pool_id": "33",
              "children": []
            }
          ]
        }
      },
      "PoolAdd": {
        "summary": "Pools.insert example",
        "value": {
          "display_name": "",
          "name": "API Center based Pool",
          "pool_definition": {
            "server_ids": [
              2
            ],
            "never_rogue": 0,
            "restrict_by": "C"
          },
          "provision": {
            "provision_on_off": 0
          }
        }
      },
      "PoolUpdateErrors": {
        "summary": "Pools.update error",
        "value": {
          "error_message": "Pool cannot be saved, some input data is not valid.",
          "error_status": "BAD_DATA",
          "errors": [
            {
              "message": "provision_time_start: Stop time should be greater than the start time",
              "path": "/body/provision/time_limits/1"
            },
            {
              "message": "Error threshold must be less than warning threshold",
              "path": "/body/log/log_error_threshold"
            },
            {
              "message": "Error threshold must be less than information threshold",
              "path": "/body/log/log_error_threshold"
            },
            {
              "message": "Warning threshold must be less than information threshold",
              "path": "/body/log/log_warning_threshold"
            },
            {
              "message": "Maximum pool size must be greater than or equal to provisioning threshold",
              "path": "/body/provision/provision_max"
            },
            {
              "message": "Please select a template",
              "path": "/body/provision/provision_vm_id"
            },
            {
              "message": "Maximum value in the {SEQUENCE} tag must be greater than the minimum value",
              "path": "/body/provision/provision_vm_name"
            },
            {
              "message": "Sequence number must in the range defined in the {SEQUENCE} tag",
              "path": "/body/provision/provision_vm_name_next_value"
            }
          ]
        }
      },
      "pool_data": {
        "summary": "Pool object example",
        "value": {
          "id": 8,
          "name": "Azure Provision Pool",
          "display_name": "",
          "notes": "",
          "read_only": 0,
          "running_vms_threshold": 0,
          "domain": {
            "domain_join": 0
          },
          "pool_definition": {
            "pool_attribute_join": "A",
            "attributes": [
              {
                "condition_type": "ne",
                "text_to_match": "13",
                "vm_table_field": "num_disks"
              },
              {
                "condition_type": "bw",
                "text_to_match": "azure-new-vm",
                "vm_table_field": "name"
              }
            ],
            "never_rogue": 0,
            "parent_pool_id": 7,
            "restrict_by": "A"
          },
          "log": {
            "log_information_threshold": 0,
            "log_warning_threshold": 0,
            "log_error_threshold": 0,
            "retain_history": {
              "pool_history_age": 0,
              "pool_history_interval": 0
            }
          },
          "provision": {
            "center": {
              "admin": "azureadmin",
              "create_public_ip": 0,
              "disk_size": null,
              "id": 4,
              "instance_size": "Basic_A2",
              "method": {
                "desc": "[same as template]",
                "type": "T"
              },
              "name": "Azure Center",
              "password": "VeryGood#P@ssw0rd",
              "resource_group": "Some_Group",
              "security_group": "",
              "sub_net": "default",
              "type": "azure",
              "use_single_group": 1,
              "vnet": "Some_Group:Some_Group-vnet"
            },
            "provision_vm_id": 88,
            "provision_limits_enforce": 0,
            "mark_deletable": 1,
            "mark_unavailable": 0,
            "provision_max": 4,
            "provision_url": "",
            "provision_on_off": 1,
            "provision_threshold": 2,
            "time_limits": [],
            "provision_vm_name": "azure-new-vm-{SEQUENCE}",
            "provision_vm_name_next_value": 12
          },
          "vms_list": [
            {
              "display_name": "",
              "hda_status": "",
              "id": 96,
              "name": "azure-new-vm-p-6",
              "out_of_service": 0,
              "status": 22,
              "user_id": 0
            },
            {
              "display_name": "",
              "hda_status": "",
              "id": 97,
              "name": "azure-new-vm-p-7",
              "out_of_service": 0,
              "status": 22,
              "user_id": 11
            }
          ]
        }
      },
      "PoolUpdate": {
        "summary": "Pools.update example",
        "value": {
          "id": 8,
          "display_name": "",
          "name": "Azure Provision Pool",
          "pool_definition": {
            "pool_attribute_join": "A",
            "attributes": [
              {
                "condition_type": "ne",
                "text_to_match": "13",
                "vm_table_field": "num_disks"
              },
              {
                "condition_type": "bw",
                "text_to_match": "azure-new-vm",
                "vm_table_field": "name"
              }
            ],
            "never_rogue": 0,
            "parent_pool_id": 7,
            "restrict_by": "A"
          },
          "provision": {
            "provision_vm_id": 88,
            "provision_threshold": 4,
            "provision_max": 4,
            "provision_limits_enforce": 0,
            "mark_deletable": 1,
            "mark_unavailable": 0,
            "provision_url": "",
            "provision_on_off": 1,
            "provision_vm_name": "azure-new-vm-{SEQUENCE}",
            "provision_vm_name_next_value": 41,
            "center": {
              "type": "azure",
              "id": 4,
              "admin": "azureadmin",
              "password": "VeryGood#P@ssw0rd",
              "resource_group": "Some_Group",
              "use_single_group": 1,
              "instance_size": "Basic_A2",
              "vnet": "Some_Group:Some_Group-vnet",
              "sub_net": "default",
              "method": {
                "type": "T"
              }
            }
          }
        }
      },
      "policy_array": {
        "summary": "Policies.list default",
        "value": [
          {
            "id": 1,
            "name": "Default"
          },
          {
            "id": 4,
            "name": "Test CLI Policy"
          },
          {
            "id": 3,
            "name": "Test Policy"
          }
        ]
      },
      "PolicyAddReturn": {
        "summary": "Policies.insert stored",
        "value": {
          "stored_data": {
            "alt_credentials": 0,
            "attribute_join": "A",
            "attributes": [
              {
                "attribute_type": "text",
                "condition_type": "ct",
                "text_attribute": "ss",
                "user_attribute": "text",
                "vm_attribute": "name"
              }
            ],
            "backup_ha_plan_power_control_id": 1,
            "backup_ha_plan_protocol_id": 1,
            "backup_ha_plan_release_id": 1,
            "backup_ha_pool_criteria_agent": 0,
            "backup_ha_pool_criteria_viewer": 0,
            "backup_ha_pool_id": 0,
            "created": "2022-11-15 16:23:04",
            "filter_ad_refresh": 0,
            "ha_adjust_timezone": 0,
            "ha_auto_login": 0,
            "ha_confirm_power_state": 0,
            "ha_disconnect_logout_delay": -1,
            "ha_display_mode": "0",
            "ha_email_decline_shadowing": 0,
            "ha_email_shadowing": 0,
            "ha_enable_power_control_reboot": 0,
            "ha_enable_power_control_stop": 0,
            "ha_enable_power_control_ipmi_reset": 0,
            "ha_enable_shadowing": 0,
            "ha_gateway_port_close_delay": 5,
            "ha_idle_disconnect_delay": -1,
            "ha_idle_lock_delay": -1,
            "ha_idle_logout_delay": -1,
            "ha_login_as": "R",
            "ha_logout_rogue": 0,
            "ha_never_rogue": 0,
            "ha_offer_running_without_hda": 1,
            "ha_on_disconnect_url": "",
            "ha_on_logout_url": "",
            "ha_plan_power_control_id": 1,
            "ha_plan_protocol_id": 1,
            "ha_plan_script_id": 0,
            "ha_power_on": 1,
            "ha_retain_connection": 0,
            "ha_shadowing_filter": "0",
            "ha_shadowing_filter_json": {},
            "ha_start_if_stopped": 1,
            "ha_unverified_user_state": "L",
            "hide_hover_menu": 0,
            "id": 27,
            "is_default": 0,
            "launch_rdc": 0,
            "max_desktops": -1,
            "name": "Test example Policy",
            "notes": "",
            "offer_empty_pools": 0,
            "pool_assignments": [
              {
                "id": 16,
                "pool_id": 29,
                "pool_name": "Example Pool"
              }
            ],
            "rogue_plan_power_control_id": 1,
            "rogue_plan_release_id": 1,
            "rogue_plan_script_id": 0,
            "session_expire_delay": 2880,
            "session_expire_on_lock": 0,
            "session_start_url": "",
            "session_start_url_block": 0,
            "session_start_url_block_msg": "<b>Sign in error</b><br>Unable to initialize session",
            "session_start_url_cb": 0,
            "session_start_url_timeout": 5,
            "single_desktop_only": 0,
            "store_configurable_params": 0,
            "updated": "2022-11-25 14:07:08",
            "usb": [
              {
                "devclass": "10",
                "productid": "",
                "vendorid": ""
              }
            ],
            "usb_enabled": 1,
            "usb_mode": "C",
            "vmware_view_servers": [],
            "web_client_new_window": 0
          },
          "warnings": {
            "pool_assignments": "Policy Pool Assignments should be modified via own API methods"
          }
        }
      },
      "PolicyInsertErrorUsb": {
        "summary": "policies.insert 400 USB example",
        "value": {
          "error_message": "Error saving of given data, see additional fields for details",
          "error_status": "BAD_DATA",
          "errors": [
            {
              "message": "Specify either Vendor and Device IDs, or a Device Class (not both)",
              "path": "/body/usb/1/devclass"
            },
            {
              "message": "The following USB item fields are missing: productid vendorid",
              "path": "/body/usb/2"
            }
          ]
        }
      },
      "policy_data": {
        "summary": "Policies.get default",
        "value": {
          "alt_credentials": 0,
          "attribute_join": "A",
          "attributes": [
            {
              "attribute_type": "text",
              "condition_type": "ct",
              "text_attribute": "ss",
              "user_attribute": "text",
              "vm_attribute": "name"
            }
          ],
          "backup_ha_plan_power_control_id": 1,
          "backup_ha_plan_protocol_id": 1,
          "backup_ha_plan_release_id": 1,
          "backup_ha_pool_criteria_agent": 0,
          "backup_ha_pool_criteria_viewer": 0,
          "backup_ha_pool_id": 0,
          "filter_ad_refresh": 0,
          "ha_adjust_timezone": 0,
          "ha_auto_login": 0,
          "ha_confirm_power_state": 0,
          "ha_disconnect_logout_delay": -1,
          "ha_display_mode": "0",
          "ha_email_decline_shadowing": 0,
          "ha_email_shadowing": 0,
          "ha_enable_power_control_reboot": 0,
          "ha_enable_power_control_stop": 0,
          "ha_enable_power_control_ipmi_reset": 0,
          "ha_enable_shadowing": 0,
          "ha_idle_disconnect_delay": -1,
          "ha_idle_lock_delay": -1,
          "ha_idle_logout_delay": -1,
          "ha_login_as": "R",
          "ha_logout_rogue": 0,
          "ha_offer_running_without_hda": 1,
          "ha_on_disconnect_url": "",
          "ha_on_logout_url": "",
          "ha_plan_power_control_id": 1,
          "ha_plan_protocol_id": 1,
          "ha_power_on": 1,
          "ha_retain_connection": 0,
          "ha_shadowing_filter": "1",
          "ha_shadowing_filter_json": {
            "filters": [
              {
                "ha_shadowing_filter_condition": "ct",
                "ha_shadowing_filter_value": "apod",
                "ha_shadowing_filter_attribute": "name"
              }
            ],
            "join": "A"
          },
          "ha_start_if_stopped": 1,
          "ha_unverified_user_state": "L",
          "hide_hover_menu": 0,
          "id": 3,
          "launch_rdc": 0,
          "max_desktops": -1,
          "name": "Test Policy",
          "notes": "",
          "offer_empty_pools": 0,
          "pool_assignments": [
            {
              "id": 18,
              "pool_id": 9,
              "pool_name": "vCenter 6 hosts Pool"
            }
          ],
          "rogue_plan_power_control_id": 1,
          "rogue_plan_release_id": 1,
          "session_expire_delay": 2880,
          "session_expire_on_lock": 0,
          "session_start_url": "",
          "session_start_url_block": 0,
          "session_start_url_block_msg": "<b>Sign in error</b><br>Unable to initialize session",
          "session_start_url_cb": 0,
          "session_start_url_timeout": 5,
          "single_desktop_only": 0,
          "store_configurable_params": 0,
          "usb_enabled": 0,
          "usb_mode": "A",
          "vmware_view_servers": [],
          "web_client_new_window": 0
        }
      },
      "assign_array": {
        "summary": "policies.pool_assignments.list example",
        "value": [
          {
            "id": 14,
            "pool_id": 8,
            "pool_name": "vCenter 6 Pool"
          },
          {
            "id": 18,
            "pool_id": 9,
            "pool_name": "vCenter 6 hosts Pool"
          }
        ]
      },
      "PoolAssignmentAddReturn": {
        "summary": "policies.pool_assignments.insert example",
        "value": {
          "stored_data": {
            "adjust_timezone": 0,
            "attribute_filter": [
              {
                "attribute_type": "text",
                "condition_type": "ct",
                "text_attribute": "ss",
                "user_attribute": "text",
                "vm_attribute": "name"
              }
            ],
            "attribute_join": "A",
            "auto_login": 0,
            "backup_pool_criteria_agent": 0,
            "backup_pool_criteria_empty": 1,
            "backup_pool_criteria_viewer": 1,
            "backup_pool_data": {
              "created": "2022-11-18 17:08:19",
              "display_name": "",
              "id": 34,
              "is_root": 0,
              "name": "Example API Pool Updated",
              "pool_type": "D",
              "read_only": 0,
              "updated": "2022-11-25 14:05:29"
            },
            "backup_pool_id": 34,
            "bu_plan_power_control_data": {
              "id": 1,
              "name": "Default"
            },
            "bu_plan_power_control_id": 1,
            "bu_plan_protocol_data": {
              "id": 1,
              "name": "Default"
            },
            "bu_plan_protocol_id": 1,
            "bu_plan_release_data": {
              "id": 1,
              "name": "Default"
            },
            "bu_plan_release_id": 1,
            "confirm_power_state": 0,
            "created": "2022-11-17 18:53:58",
            "display_mode": "0",
            "email_decline_shadowing": 0,
            "email_shadowing": 0,
            "enable_power_control_reboot": 0,
            "enable_power_control_stop": 0,
            "enable_power_control_ipmi_reset": 0,
            "enable_shadowing": 0,
            "favor_previous_assigned": 1,
            "id": 16,
            "kiosk": 0,
            "login_as": "R",
            "logout_rogue": 0,
            "offer_filter": "0",
            "offer_filter_json": {},
            "offer_pending_reboot": 1,
            "offer_quantity": 1,
            "offer_running_without_hda": 0,
            "on_assign_url": "",
            "on_assign_url_cb": 0,
            "on_assign_url_timeout": 5,
            "plan_power_control_data": {
              "id": 1,
              "name": "Default"
            },
            "plan_power_control_id": 1,
            "plan_protocol_data": {
              "id": 1,
              "name": "Default"
            },
            "plan_protocol_id": 1,
            "plan_release_data": {
              "id": 1,
              "name": "Default"
            },
            "plan_release_id": 1,
            "plan_script_data": {
              "id": 0,
              "name": ""
            },
            "plan_script_id": 0,
            "policy_id": 27,
            "pool_data": {
              "created": "2022-10-13 17:36:41",
              "display_name": "",
              "id": 29,
              "is_root": 0,
              "name": "Example Pool",
              "pool_type": "D",
              "read_only": 0,
              "updated": "2022-11-25 14:05:29"
            },
            "pool_id": 29,
            "power_on": 0,
            "prevent_release": 0,
            "revert_to_snapshot": 0,
            "shadowing_filter": "0",
            "shadowing_filter_json": {},
            "start_if_stopped": 1,
            "updated": "2022-11-25 14:08:06"
          }
        }
      },
      "assign_data": {
        "summary": "policies.pool_assignments.get example",
        "value": {
          "adjust_timezone": 0,
          "attribute_filter": [
            {
              "vm_attribute": "name",
              "text_attribute": "ss",
              "attribute_type": "text",
              "user_attribute": "text",
              "condition_type": "ct"
            }
          ],
          "attribute_join": "A",
          "auto_login": 0,
          "backup_pool_criteria": "0",
          "backup_pool_id": 0,
          "bu_plan_power_control_data": {
            "id": 1,
            "name": "Default"
          },
          "bu_plan_power_control_id": 1,
          "bu_plan_protocol_data": {
            "id": 1,
            "name": "Default"
          },
          "bu_plan_protocol_id": 1,
          "bu_plan_release_data": {
            "id": 1,
            "name": "Default"
          },
          "bu_plan_release_id": 1,
          "confirm_power_state": 0,
          "display_mode": "0",
          "email_decline_shadowing": 0,
          "email_shadowing": 0,
          "enable_power_control_reboot": 0,
          "enable_power_control_stop": 0,
          "enable_power_control_ipmi_reset": 0,
          "enable_shadowing": 0,
          "favor_previous_assigned": 1,
          "id": 14,
          "kiosk": 0,
          "login_as": "R",
          "logout_rogue": 0,
          "offer_filter": "0",
          "offer_filter_json": null,
          "offer_pending_reboot": 1,
          "offer_quantity": 1,
          "offer_running_without_hda": 0,
          "on_assign_url": "",
          "on_assign_url_cb": 0,
          "on_assign_url_timeout": 5,
          "plan_power_control_data": {
            "id": 1,
            "name": "Default"
          },
          "plan_power_control_id": 1,
          "plan_protocol_data": {
            "id": 1,
            "name": "Default"
          },
          "plan_protocol_id": 1,
          "plan_release_data": {
            "id": 1,
            "name": "Default"
          },
          "plan_release_id": 1,
          "policy_id": 3,
          "pool_data": {
            "id": 8,
            "name": "vCenter 6 Pool"
          },
          "pool_id": 8,
          "power_on": 0,
          "prevent_release": 0,
          "revert_to_snapshot": 0,
          "shadowing_filter": "0",
          "shadowing_filter_json": null,
          "start_if_stopped": 1
        }
      },
      "license_data": {
        "summary": "system.license.get example",
        "value": {
          "active_desktops": 0,
          "active_users": 1234,
          "active_users_text": "1,234",
          "cluster_max": 2,
          "expiration_date": "2021-12-31",
          "install_no": "ffffffffffffffffffffffffffffffff-11111",
          "license_expired": 0,
          "license_present": 1,
          "license_valid": 1,
          "licensed_desktops": 1730730,
          "licensed_desktops_text": "unlimited",
          "licensed_gateways": 10,
          "licensed_tenants": 0,
          "licensed_users": 1300,
          "licensed_users_text": "1,300",
          "num_brokers": 1,
          "num_gateways": 0,
          "num_tenants": 0,
          "serial_no": "000-000-000",
          "support_expiration_date": "2021-12-31",
          "support_expired": 0
        }
      },
      "AllOnline": {
        "summary": "All components OK",
        "description": "All components are reachable or running.\n",
        "value": {
          "components": {
            "auth": {
              "msg": "OK",
              "reachable": 1
            },
            "db_external": {
              "msg": "OK",
              "reachable": 1
            },
            "db_internal": {
              "msg": "OK",
              "reachable": 1
            },
            "load": {
              "msg": "OK",
              "avg_1": 0.15,
              "avg_15": 0.02,
              "avg_5": 0.05
            },
            "redis": {
              "msg": "OK",
              "running": 1
            },
            "work_queue": {
              "msg": "OK",
              "running": 1
            }
          },
          "broker": {
            "hostname": "broker-01.example.com",
            "msg": "OK"
          }
        }
      },
      "OnlyEnabled": {
        "summary": "Only enabled components OK",
        "description": "All components are reachable or running. External database\nand remote authentication disabled or not configured.\n",
        "value": {
          "components": {
            "auth": null,
            "db_external": null,
            "db_internal": {
              "msg": "OK",
              "reachable": 1
            },
            "load": {
              "msg": "OK",
              "avg_1": 0.12,
              "avg_15": 0.02,
              "avg_5": 0.05
            },
            "redis": {
              "msg": "OK",
              "running": 1
            },
            "work_queue": {
              "msg": "OK",
              "running": 1
            }
          },
          "broker": {
            "hostname": "broker-01.example.com",
            "msg": "OK"
          }
        }
      },
      "HighLoadAverage": {
        "summary": "High system load average",
        "description": "High system load average.\n",
        "value": {
          "components": {
            "auth": {
              "msg": "OK",
              "reachable": 1
            },
            "db_external": {
              "msg": "OK",
              "reachable": 1
            },
            "db_internal": {
              "msg": "OK",
              "reachable": 1
            },
            "load": {
              "msg": "high load",
              "avg_1": 4.22,
              "avg_15": 2.53,
              "avg_5": 2.91
            },
            "redis": {
              "msg": "OK",
              "running": 1
            },
            "work_queue": {
              "msg": "OK",
              "running": 1
            }
          },
          "broker": {
            "hostname": "broker-01.example.com",
            "msg": "not OK"
          }
        }
      },
      "AuthFailConnect": {
        "summary": "Remote authentication failure",
        "description": "Cannot connect to active remote authentication servers.\n",
        "value": {
          "components": {
            "auth": {
              "msg": "cannot connect",
              "reachable": 0
            },
            "db_external": {
              "msg": "OK",
              "reachable": 1
            },
            "db_internal": {
              "msg": "OK",
              "reachable": 1
            },
            "load": {
              "msg": "OK",
              "avg_1": 0.21,
              "avg_15": 0.11,
              "avg_5": 0.05
            },
            "redis": {
              "msg": "OK",
              "running": 1
            },
            "work_queue": {
              "msg": "OK",
              "running": 1
            }
          },
          "broker": {
            "hostname": "broker-01.example.com",
            "msg": "not OK"
          }
        }
      },
      "WorkQueueNotRunning": {
        "summary": "Work queue not running",
        "description": "The work queue is stopped.\n",
        "value": {
          "components": {
            "auth": {
              "msg": "OK",
              "reachable": 1
            },
            "db_external": {
              "msg": "OK",
              "reachable": 1
            },
            "db_internal": {
              "msg": "OK",
              "reachable": 1
            },
            "load": {
              "msg": "OK",
              "avg_1": 0.09,
              "avg_15": 0.31,
              "avg_5": 0.15
            },
            "redis": {
              "msg": "OK",
              "running": 1
            },
            "work_queue": {
              "msg": "not running",
              "running": 1
            }
          },
          "broker": {
            "hostname": "broker-01.example.com",
            "msg": "not OK"
          }
        }
      },
      "StatusMix": {
        "summary": "Mixed component status & high load",
        "description": "Databases online. Remote authentication offline. Work queue\nnot running.\n",
        "value": {
          "components": {
            "auth": {
              "msg": "cannot connect",
              "reachable": 0
            },
            "db_external": {
              "msg": "OK",
              "reachable": 1
            },
            "db_internal": {
              "msg": "OK",
              "reachable": 1
            },
            "load": {
              "msg": "high load",
              "avg_1": 4.22,
              "avg_15": 2.53,
              "avg_5": 2.91
            },
            "redis": {
              "msg": "OK",
              "running": 1
            },
            "work_queue": {
              "msg": "not running",
              "running": 0
            }
          },
          "broker": {
            "hostname": "broker-01.example.com",
            "msg": "not OK"
          }
        }
      },
      "UserCreated": {
        "summary": "users.insert example",
        "value": {
          "stored_data": {
            "id": 7
          }
        }
      },
      "ErrorUserExists": {
        "summary": "users.insert 409 example",
        "value": {
          "error_message": "User \"test_user1\" already exists",
          "error_status": "EXISTS_ALREADY"
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UNAUTHORIZED"
            }
          }
        }
      },
      "InsufficientPermissions": {
        "description": "Not enough API permissions.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/INSUFFICIENT_PERMISSIONS"
            }
          }
        }
      },
      "BadRequest": {
        "description": "The operation was not successful: the request is incorrect.\nThe response contains the following fields: 'error_status' and 'error_message'.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BAD_DATA"
            }
          }
        }
      },
      "ConflictOrNotUnique": {
        "description": "An error occurred during object creation. See the 'error_message' field for more details.\n",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Conflict"
                },
                {
                  "$ref": "#/components/schemas/NotUnique"
                }
              ]
            },
            "examples": {
              "object_insert": {
                "$ref": "#/components/examples/PolicyInsertNotUnique"
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Indicates that the requested data does not exist.\n"
      },
      "Deleting": {
        "description": "The Delete job has been successfully queued.\n"
      },
      "NoContent": {
        "description": "The Delete operation was successful.\n"
      },
      "Conflict": {
        "description": "An error occurred during object creation. See the 'error_message' field for more details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Conflict"
            }
          }
        }
      },
      "CenterScanning": {
        "description": "The Scan job has been successfully queued.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RespCenterScan"
            },
            "examples": {
              "center_add": {
                "$ref": "#/components/examples/RespCenterScan"
              }
            }
          }
        }
      },
      "BadRequestPut": {
        "description": "The operation was not successful: the request is incorrect.\nThe response contains the following fields: 'error_status' and 'error_message'.\n\n##### Field 'error_status' is BAD_DATA\n\nTypically indicates an invalid body JSON. See the 'error_message' field for additional details.\nIf the request is missing required parameters, the 'missing_fields' field contains a list of missing parameters.\n\nNote that this behavior (using low-level errors in the 'items') may be changed in future releases of the API.\n\n##### Field 'error_status' is BAD_ID\n\nThe operation was not successful: the request body has an invalid Pool ID value.\n",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BAD_DATA_PUT"
                },
                {
                  "$ref": "#/components/schemas/InvalidObjectID"
                }
              ]
            }
          }
        }
      },
      "BadRequestPool": {
        "description": "The operation was not successful: the request is incorrect.\nThe response contains the following fields: 'error_status' and 'error_message'.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BAD_DATA"
            },
            "examples": {
              "pool_update_error": {
                "$ref": "#/components/examples/PoolUpdateErrors"
              }
            }
          }
        }
      },
      "BadRequestPutPool": {
        "description": "The operation was not successful: the request is incorrect.\nThe response contains the following fields: 'error_status' and 'error_message'.\n",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BAD_DATA_PUT"
                },
                {
                  "$ref": "#/components/schemas/InvalidObjectID"
                }
              ],
              "discriminator": {
                "propertyName": "error_status",
                "mapping": {
                  "BAD_DATA": "#/components/schemas/BAD_DATA_PUT",
                  "BAD_ID": "#/components/schemas/InvalidObjectID"
                }
              }
            },
            "examples": {
              "pool_update_error": {
                "$ref": "#/components/examples/PoolUpdateErrors"
              }
            }
          }
        }
      },
      "BadRequestLogin": {
        "description": "The response contains the following fields: 'error_status' and 'error_message'.\nSee the 'error_message' field for details.\nIf the request is missing required parameters, the 'missing_fields' field contains a list of missing parameters.\nIf a parameter specifies an invalid value, the 'errors' field contains additional information on the error.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BAD_DATA"
            }
          }
        }
      },
      "InvalidCredentials": {
        "description": "Cannot authorize",
        "content": {
          "application/json": {
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/INVALID_CREDENTIALS"
                },
                {
                  "$ref": "#/components/schemas/LICENSE_EXPIRED"
                }
              ]
            }
          }
        }
      },
      "BadRequestPolicy": {
        "description": "The operation was not successful: the request is incorrect.\nThe response contains the following fields: 'error_status' and 'error_message'.\n",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BAD_DATA"
                },
                {
                  "$ref": "#/components/schemas/InvalidObjectID"
                }
              ]
            },
            "examples": {
              "policy_insert": {
                "$ref": "#/components/examples/PolicyInsertErrorUsb"
              }
            }
          }
        }
      },
      "ExistsAlreadyUser": {
        "description": "The operation was not successful: this 'user_login' exists already\nThe response contains the following fields: 'error_status' and 'error_message'.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserExists"
            },
            "examples": {
              "exists": {
                "$ref": "#/components/examples/ErrorUserExists"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "apiAuth": []
    }
  ],
  "paths": {
    "/centers": {
      "get": {
        "summary": "centers.list",
        "description": "Retrieves the list of Centers currently defined in the Connection Broker.\n",
        "tags": [
          "Centers",
          "API lists"
        ],
        "operationId": "getCenterList",
        "x-mojo-name": "get_centerslist",
        "x-mojo-to": "centers#list",
        "responses": {
          "200": {
            "description": "A list of Centers.\nEach record contains general information about the Center.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/center_array"
                },
                "examples": {
                  "c_array": {
                    "$ref": "#/components/examples/center_array"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      }
    },
    "/centers/active_directory": {
      "post": {
        "summary": "centers.active_directory.insert",
        "description": "Add an Active Directory Center to the Connection Broker.\n",
        "tags": [
          "Centers",
          "API inserts"
        ],
        "operationId": "addActiveDirectoryCenter",
        "x-mojo-name": "add_active_directory_center",
        "x-mojo-to": [
          "centers#create",
          {
            "type": "active_directory"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActiveDirectoryCenterAdd"
              },
              "examples": {
                "center_add": {
                  "$ref": "#/components/examples/ActiveDirectoryCenterAdd"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_add": {
                    "$ref": "#/components/examples/RespActiveDirectoryCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ConflictOrNotUnique"
          }
        }
      }
    },
    "/centers/amazon": {
      "post": {
        "summary": "centers.amazon.insert",
        "description": "Add an AWS Center to the Connection Broker.\n",
        "tags": [
          "Centers",
          "API inserts"
        ],
        "operationId": "addAWSCenter",
        "x-mojo-name": "add_aws_center",
        "x-mojo-to": [
          "centers#create",
          {
            "type": "amazon"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWSCenterAdd"
              },
              "examples": {
                "center_add": {
                  "$ref": "#/components/examples/AWSCenterAdd"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_add": {
                    "$ref": "#/components/examples/RespAWSCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ConflictOrNotUnique"
          }
        }
      }
    },
    "/centers/uncategorized": {
      "post": {
        "summary": "centers.uncategorized.insert",
        "description": "Add an Uncategorized Center to the Connection Broker.\n",
        "tags": [
          "Centers",
          "API inserts"
        ],
        "operationId": "addUncategorizedCenter",
        "x-mojo-name": "add_uncategorized_center",
        "x-mojo-to": [
          "centers#create",
          {
            "type": "uncategorized"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UncategorizedCenterAdd"
              },
              "examples": {
                "center_add": {
                  "$ref": "#/components/examples/UncategorizedCenterAdd"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_add": {
                    "$ref": "#/components/examples/RespUncategorizedCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ConflictOrNotUnique"
          }
        }
      }
    },
    "/centers/vcenter": {
      "post": {
        "summary": "centers.vcenter.insert",
        "description": "Add an VMware vSphere and vCenter Center to the Connection Broker.\n",
        "tags": [
          "Centers",
          "API inserts"
        ],
        "operationId": "addVMwareCenter",
        "x-mojo-name": "add_vmware_center",
        "x-mojo-to": [
          "centers#create",
          {
            "type": "vcenter"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMwareCenterAdd"
              },
              "examples": {
                "center_add": {
                  "$ref": "#/components/examples/VMwareCenterAdd"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_add": {
                    "$ref": "#/components/examples/RespVMwareCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ConflictOrNotUnique"
          }
        }
      }
    },
    "/centers/{id}": {
      "get": {
        "summary": "centers.get",
        "description": "Retrieves the Center data",
        "tags": [
          "Centers",
          "API gets"
        ],
        "operationId": "getCenterData",
        "x-mojo-name": "get_center_data",
        "x-mojo-to": "centers#get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "short",
            "in": "query",
            "description": "Specifies whether to return only a short form of the Center object,\nwithout loading other tables data etc.\nIt is useful for cases we need only check status or if the Center persists\nafter start of the delete request.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Center object in JSON representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CenterFull"
                },
                "examples": {
                  "c_data": {
                    "$ref": "#/components/examples/center_data"
                  },
                  "c_active_directory": {
                    "$ref": "#/components/examples/ActiveDirectoryCenter"
                  },
                  "c_aws": {
                    "$ref": "#/components/examples/AWSCenter"
                  },
                  "c_uncategorized": {
                    "$ref": "#/components/examples/UncategorizedCenter"
                  },
                  "c_vcenter": {
                    "$ref": "#/components/examples/VMwareCenter"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "centers.delete",
        "description": "Deletes an existing Center.\n",
        "tags": [
          "Centers",
          "API deletes"
        ],
        "operationId": "removeCenter",
        "x-mojo-name": "remove_center",
        "x-mojo-to": "centers#remove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Deleting"
          },
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/centers/{id:num}/scan": {
      "post": {
        "summary": "centers.scan",
        "description": "Start scan of a Center.\n",
        "tags": [
          "Centers",
          "API scans"
        ],
        "operationId": "scanCenter",
        "x-mojo-name": "scan_center",
        "x-mojo-to": "centers#scan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Scan operation was successful.\n"
          },
          "202": {
            "$ref": "#/components/responses/CenterScanning"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/centers/active_directory/{id}": {
      "put": {
        "summary": "centers.active_directory.update",
        "description": "Update an existing Active Directory Center.\nSee the `insert` method documentation for details.\n",
        "tags": [
          "Centers",
          "API updates"
        ],
        "operationId": "updateActiveDirectoryCenter",
        "x-mojo-name": "update_active_directory_center",
        "x-mojo-to": [
          "centers#update",
          {
            "type": "active_directory"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActiveDirectoryCenterUpdate"
              },
              "examples": {
                "center_update": {
                  "$ref": "#/components/examples/ActiveDirectoryCenterUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_update": {
                    "$ref": "#/components/examples/RespActiveDirectoryCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/centers/amazon/{id}": {
      "put": {
        "summary": "centers.amazon.update",
        "description": "Update an existing AWS Center.\nSee the `insert` method documentation for details.\n",
        "tags": [
          "Centers",
          "API updates"
        ],
        "operationId": "updateAWSCenter",
        "x-mojo-name": "update_aws_center",
        "x-mojo-to": [
          "centers#update",
          {
            "type": "amazon"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AWSCenterUpdate"
              },
              "examples": {
                "center_update": {
                  "$ref": "#/components/examples/AWSCenterUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_update": {
                    "$ref": "#/components/examples/RespAWSCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/centers/uncategorized/{id}": {
      "put": {
        "summary": "centers.uncategorized.update",
        "description": "Update an existing Uncategorized Center.\nSee the `insert` method documentation for details.\n",
        "tags": [
          "Centers",
          "API updates"
        ],
        "operationId": "updateUncategorizedCenter",
        "x-mojo-name": "update_uncategorized_center",
        "x-mojo-to": [
          "centers#update",
          {
            "type": "uncategorized"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UncategorizedCenterUpdate"
              },
              "examples": {
                "center_update": {
                  "$ref": "#/components/examples/UncategorizedCenterUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_update": {
                    "$ref": "#/components/examples/RespUncategorizedCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/centers/vcenter/{id}": {
      "put": {
        "summary": "centers.vcenter.update",
        "description": "Update an existing VMware vSphere and vCenter Center.\nSee the `insert` method documentation for details.\n",
        "tags": [
          "Centers",
          "API updates"
        ],
        "operationId": "updateVMwareCenter",
        "x-mojo-name": "update_vmware_center",
        "x-mojo-to": [
          "centers#update",
          {
            "type": "vcenter"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMwareCenterUpdate"
              },
              "examples": {
                "center_update": {
                  "$ref": "#/components/examples/VMwareCenterUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespCenterCreated"
                },
                "examples": {
                  "center_update": {
                    "$ref": "#/components/examples/RespVMwareCenterCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/centers/vcenter/{id:num}/esx-servers": {
      "get": {
        "summary": "centers.vcenter.esx_servers.list",
        "description": "Retrieves the list of Managed ESX Servers\nof the  VMware vSphere and vCenter Center.\n",
        "tags": [
          "Centers",
          "API lists"
        ],
        "operationId": "getVMwareCenterESXServersList",
        "x-mojo-name": "get_vmware_center_esx_servers_list",
        "x-mojo-to": "centers#esx_servers_list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Managed ESX Servers.\nEach record contains information about the ESX Server.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VMwareESXServer_array"
                },
                "examples": {
                  "c_array": {
                    "$ref": "#/components/examples/ESX_Servers_array"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "centers.vcenter.esx_servers.update",
        "description": "Update some ESX Servers either by \"vc_moref\" or \"name\" fields.\n",
        "tags": [
          "Centers",
          "API updates"
        ],
        "operationId": "updateVMwareCenterESXServers",
        "x-mojo-name": "update_vmware_center_esx_servers",
        "x-mojo-to": [
          "centers#esx_servers_update",
          {
            "type": "vcenter"
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Center ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VMwareESXServerUpdate_array"
              },
              "examples": {
                "esx_update": {
                  "$ref": "#/components/examples/ESX_Servers_update_array"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespESXServersUpdated"
                },
                "examples": {
                  "center_update": {
                    "$ref": "#/components/examples/RespESXServersUpdated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/gateways": {
      "get": {
        "summary": "gateways.list",
        "description": "Retrieves the list of Gateways currently defined in the Connection Broker.\n",
        "tags": [
          "Gateways",
          "API lists"
        ],
        "operationId": "getGatewayList",
        "x-mojo-name": "get_gateway_list",
        "x-mojo-to": "gateways#list",
        "responses": {
          "200": {
            "description": "A list of Gateways.\nEach record contains general information about a Gateway.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_array"
                },
                "examples": {
                  "gateway_array": {
                    "$ref": "#/components/examples/gateway_array"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      },
      "post": {
        "summary": "gateways.insert",
        "description": "Adds a Gateway to the Connection Broker.\n",
        "tags": [
          "Gateways",
          "API inserts"
        ],
        "operationId": "addGateway",
        "x-mojo-name": "add_gateway",
        "x-mojo-to": "gateways#create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayAdd"
              },
              "examples": {
                "gateway_add": {
                  "$ref": "#/components/examples/GatewayAdd"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespGatewayCreated"
                },
                "examples": {
                  "gateway_add": {
                    "$ref": "#/components/examples/GatewayAddReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ConflictOrNotUnique"
          }
        }
      }
    },
    "/gateways/{id}": {
      "get": {
        "summary": "gateways.get",
        "description": "Returns the specified Gateway resource.",
        "tags": [
          "Gateways",
          "API gets"
        ],
        "operationId": "getGatewayData",
        "x-mojo-name": "get_gateway_data",
        "x-mojo-to": "gateways#get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gateway ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Gateway object in JSON representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayFull"
                },
                "examples": {
                  "gateway_data": {
                    "$ref": "#/components/examples/gateway_data"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "gateways.update",
        "description": "Update an existing Gateway.\n",
        "tags": [
          "Gateways",
          "API updates"
        ],
        "operationId": "updateGateway",
        "x-mojo-name": "update_gateway",
        "x-mojo-to": "gateways#update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gateway ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayUpdate"
              },
              "examples": {
                "gateway_update": {
                  "$ref": "#/components/examples/GatewayUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespGatewayCreated"
                },
                "examples": {
                  "gateway_update": {
                    "$ref": "#/components/examples/GatewayUpdateReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      },
      "delete": {
        "summary": "gateways.delete",
        "description": "Deletes an existing Gateway.\n",
        "tags": [
          "Gateways",
          "API deletes"
        ],
        "operationId": "removeGateway",
        "x-mojo-name": "remove_gateway",
        "x-mojo-to": "gateways#remove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gateway ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/gateway-clusters": {
      "get": {
        "summary": "gateway-clusters.list",
        "description": "Retrieves the list of Gateway Clusters currently defined in the Connection Broker.\n",
        "tags": [
          "Gateways",
          "API lists"
        ],
        "operationId": "getGatewayClusterList",
        "x-mojo-name": "get_gateway_cluster_list",
        "x-mojo-to": "gateways#cluster_list",
        "responses": {
          "200": {
            "description": "A list of Gateway Clusters.\nEach record contains general information about a Gateway Cluster.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gateway_array"
                },
                "examples": {
                  "gateway_array": {
                    "$ref": "#/components/examples/gateway_cluster_array"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      },
      "post": {
        "summary": "gateway-clusters.insert",
        "description": "Adds a Gateway Cluster to the Connection Broker.\n",
        "tags": [
          "Gateways",
          "API inserts"
        ],
        "operationId": "addGatewayCluster",
        "x-mojo-name": "add_gateway_cluster",
        "x-mojo-to": "gateways#cluster_create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayClusterAdd"
              },
              "examples": {
                "gateway_add": {
                  "$ref": "#/components/examples/GatewayClusterAdd"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespGatewayClusterCreated"
                },
                "examples": {
                  "gateway_add": {
                    "$ref": "#/components/examples/GatewayClusterAddReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ConflictOrNotUnique"
          }
        }
      }
    },
    "/gateway-clusters/{id}": {
      "get": {
        "summary": "gateway-clusters.get",
        "description": "Returns the specified Gateway Cluster resource.",
        "tags": [
          "Gateways",
          "API gets"
        ],
        "operationId": "getGatewayClusterData",
        "x-mojo-name": "get_gateway_cluster_data",
        "x-mojo-to": "gateways#cluster_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gateway Cluster ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Gateway Cluster object in JSON representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayClusterFull"
                },
                "examples": {
                  "gateway_data": {
                    "$ref": "#/components/examples/GatewayCluster_data"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "gateway-clusters.update",
        "description": "Update an existing Gateway Cluster.\n",
        "tags": [
          "Gateways",
          "API updates"
        ],
        "operationId": "updateGatewayCluster",
        "x-mojo-name": "update_gateway_cluster",
        "x-mojo-to": "gateways#cluster_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gateway Cluster ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayClusterUpdate"
              },
              "examples": {
                "gateway_update": {
                  "$ref": "#/components/examples/GatewayClusterUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespGatewayClusterCreated"
                },
                "examples": {
                  "gateway_update": {
                    "$ref": "#/components/examples/GatewayClusterUpdateReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      },
      "delete": {
        "summary": "gateway-clusters.delete",
        "description": "Deletes an existing Gateway Cluster.\n",
        "tags": [
          "Gateways",
          "API deletes"
        ],
        "operationId": "removeGatewayCluster",
        "x-mojo-name": "remove_gateway_cluster",
        "x-mojo-to": "gateways#cluster_remove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gateway Cluster ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/pools": {
      "get": {
        "summary": "pools.list",
        "description": "Retrieves the list of Pool resources currently defined in the Connection Broker.\n",
        "tags": [
          "Pools",
          "API lists"
        ],
        "operationId": "getPoolList",
        "x-mojo-name": "get_pool_list",
        "x-mojo-to": "pools#list",
        "parameters": [
          {
            "name": "as_tree",
            "in": "query",
            "description": "Specifies whether to show the list as a tree.\n",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Pool ID value of the tree root, processed only if the parameter\n`as_tree` equals '1'.\n",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Pools.\nEach record contains general information about a Pool.\n",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/pool_array"
                    },
                    {
                      "$ref": "#/components/schemas/pools_as_tree"
                    }
                  ]
                },
                "examples": {
                  "pool_array": {
                    "$ref": "#/components/examples/pool_array"
                  },
                  "pools_as_tree": {
                    "$ref": "#/components/examples/pools_as_tree"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      },
      "post": {
        "summary": "pools.insert",
        "description": "Add a pool to the Connection Broker. Specify the appropriate additional parameters based on how the pool is defined, as\ndetermined by the `pool_definition.restrict_by` parameter.\n",
        "tags": [
          "Pools",
          "API inserts"
        ],
        "operationId": "addPool",
        "x-mojo-name": "add_pool",
        "x-mojo-to": "pools#create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolAdd"
              },
              "examples": {
                "pool_add": {
                  "$ref": "#/components/examples/PoolAdd"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespPoolCreated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPool"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ConflictOrNotUnique"
          }
        }
      }
    },
    "/pools/{id}": {
      "get": {
        "summary": "pools.get",
        "description": "Returns the specified Pool resource.",
        "tags": [
          "Pools",
          "API gets"
        ],
        "operationId": "getPoolData",
        "x-mojo-name": "get_pool_data",
        "x-mojo-to": "pools#get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pool ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Pool object in JSON representation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoolFull"
                },
                "examples": {
                  "p_data": {
                    "$ref": "#/components/examples/pool_data"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "pools.update",
        "description": "Update an existing pool. Specify different pool parameters depending on how the pool is defined.\nSee the `pools.insert` method documentation for details.\n",
        "tags": [
          "Pools",
          "API updates"
        ],
        "operationId": "updatePool",
        "x-mojo-name": "update_pool",
        "x-mojo-to": "pools#update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pool ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolUpdate"
              },
              "examples": {
                "pool_add": {
                  "$ref": "#/components/examples/PoolUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespPoolCreated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPutPool"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      },
      "delete": {
        "summary": "pools.delete",
        "description": "Deletes an existing pool.\n",
        "tags": [
          "Pools",
          "API deletes"
        ],
        "operationId": "removePool",
        "x-mojo-name": "remove_pool",
        "x-mojo-to": "pools#remove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pool ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/session/login": {
      "post": {
        "summary": "session.login",
        "description": "Authenticate a user session to access the Leostream Management APIs.\n",
        "tags": [
          "Session"
        ],
        "operationId": "userLogin",
        "x-mojo-name": "user_login",
        "x-mojo-to": "session#login",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/session_login"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/session_login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sid": {
                      "type": "string",
                      "description": "Unique identifier associated with this session."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestLogin"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredentials"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      }
    },
    "/session/logout": {
      "post": {
        "summary": "session.logout",
        "description": "Delete user session (log out the user).\n",
        "tags": [
          "Session"
        ],
        "operationId": "userLogout",
        "x-mojo-name": "user_logout",
        "x-mojo-to": "session#logout",
        "responses": {
          "200": {
            "description": "Successful logout.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message about successful logout"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/policies": {
      "get": {
        "summary": "policies.list",
        "description": "Retrieves the list of Policies currently defined in the Connection Broker.\n",
        "tags": [
          "Policies",
          "API lists"
        ],
        "operationId": "getPolicyList",
        "x-mojo-name": "get_policy_list",
        "x-mojo-to": "policies#list",
        "responses": {
          "200": {
            "description": "A list of Policies.\nEach record contains general information about a Policy.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policies_array"
                },
                "examples": {
                  "policy_array": {
                    "$ref": "#/components/examples/policy_array"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      },
      "post": {
        "summary": "policies.insert",
        "description": "Add a Policy to the Connection Broker. Specify different policy parameters depending on the way the policy\nis defined. After inserting a policy, use the `policies.pool_assignments.insert` method to add Desktop assignments from pools to the policy.\n",
        "tags": [
          "Policies",
          "API inserts"
        ],
        "operationId": "addPolicy",
        "x-mojo-name": "add_policy",
        "x-mojo-to": "policies#create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyFull"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespPolicyCreated"
                },
                "examples": {
                  "policy_add": {
                    "$ref": "#/components/examples/PolicyAddReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPolicy"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      }
    },
    "/policies/{id}": {
      "get": {
        "summary": "policies.get",
        "description": "Returns the specified Policy resource.",
        "tags": [
          "Policies",
          "API gets"
        ],
        "operationId": "getPolicyData",
        "x-mojo-name": "get_policy_data",
        "x-mojo-to": "policies#get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Policy object in JSON representation. Some children objects (e.g. 'pool_assignments')\ncontain data from other database tables and must be processed separately.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyFull"
                },
                "examples": {
                  "p_data": {
                    "$ref": "#/components/examples/policy_data"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "policies.update",
        "description": "Update an existing policy. There can be different policy parameters depending on the way the\npolicy is defined. See the 'policies.insert' method documentation for details.\n",
        "tags": [
          "Policies",
          "API updates"
        ],
        "operationId": "updatePolicy",
        "x-mojo-name": "update_policy",
        "x-mojo-to": "policies#update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyFull"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespPolicyCreated"
                },
                "examples": {
                  "policy_add": {
                    "$ref": "#/components/examples/PolicyAddReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "policies.delete",
        "description": "Deletes an existing policy.\n",
        "tags": [
          "Policies",
          "API deletes"
        ],
        "operationId": "removePolicy",
        "x-mojo-name": "remove_policy",
        "x-mojo-to": "policies#remove",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/policies/{policy_id}/pool-assignments": {
      "get": {
        "summary": "policies.pool_assignments.list",
        "description": "Retrieves the list of Pool Assignments for the specified Policy.\n",
        "tags": [
          "Policies",
          "API lists"
        ],
        "operationId": "getPolicyAssignList",
        "x-mojo-name": "get_policy_assign_list",
        "x-mojo-to": "policies#assign_list",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Pool Assignments.\nEach record contains general information about a Pool Assignment.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pool_assignments_array"
                },
                "examples": {
                  "assign_array": {
                    "$ref": "#/components/examples/assign_array"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "summary": "policies.pool_assignments.insert",
        "description": "Adds a Pool Assignment to an existing Policy.\nSpecify different Assignment parameters depending on the way the Pool Assignment is defined.\n",
        "tags": [
          "Policies",
          "API inserts"
        ],
        "operationId": "addPolicyAssign",
        "x-mojo-name": "add_policy_assign",
        "x-mojo-to": "policies#assign_create",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolAssignmentAdd"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespPoolAssignmentCreated"
                },
                "examples": {
                  "pool_assignment_add": {
                    "$ref": "#/components/examples/PoolAssignmentAddReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPolicy"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      }
    },
    "/policies/{policy_id}/pool-assignments/{id}": {
      "get": {
        "summary": "policies.pool_assignments.get",
        "description": "Returns the specified Pool Assignment resource from the specified Policy.\n",
        "tags": [
          "Policies",
          "API gets"
        ],
        "operationId": "getPolicyAssignData",
        "x-mojo-name": "get_policy_assign_data",
        "x-mojo-to": "policies#assign_get",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Pool Assignment ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Pool Assignment object in JSON representation.\nThe returned JSON contains a set of reference fields with general information about referenced objects,\nfor example, for the referenced ID of the protocol plan for the backup pool ('bu_plan_protocol_id'),\nthe data will be an object named 'bu_plan_protocol_data'. This data is a read-only value\nand cannot be changed by the 'policies.pool_assignments.update' method.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoolAssignmentFull"
                },
                "examples": {
                  "p_data": {
                    "$ref": "#/components/examples/assign_data"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "policies.pool_assignments.update",
        "description": "Update an existing Pool Assignment.\nSpecify different Pool Assignment parameters depending on how the Pool Assignment is defined.\nSee the 'policies.pool_assignments.insert' method documentation for details.\n",
        "tags": [
          "Policies",
          "API updates"
        ],
        "operationId": "updatePolicyAssign",
        "x-mojo-name": "update_policy_assign",
        "x-mojo-to": "policies#assign_update",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Pool Assignment ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PoolAssignmentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Update operation was successful.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespPoolAssignmentCreated"
                },
                "examples": {
                  "pool_assignment_add": {
                    "$ref": "#/components/examples/PoolAssignmentAddReturn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestPut"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "policies.pool_assignments.delete",
        "description": "Deletes an existing Pool Assignment resource.\n",
        "tags": [
          "Policies",
          "API deletes"
        ],
        "operationId": "removePolicyAssign",
        "x-mojo-name": "remove_policy_assign",
        "x-mojo-to": "policies#assign_remove",
        "parameters": [
          {
            "name": "policy_id",
            "in": "path",
            "description": "Policy ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Pool Assignment ID value.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/system/license": {
      "get": {
        "summary": "system.license.get",
        "description": "Returns the current Leostream license information and usage.\n",
        "tags": [
          "System",
          "API gets"
        ],
        "operationId": "getLicense",
        "x-mojo-name": "get_license",
        "x-mojo-to": "system#license",
        "responses": {
          "200": {
            "description": "A License object in JSON representation.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseData"
                },
                "examples": {
                  "license": {
                    "$ref": "#/components/examples/license_data"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          }
        }
      }
    },
    "/system/health": {
      "get": {
        "summary": "system.health",
        "description": "Returns the status of Connection Broker components/services.\n",
        "tags": [
          "System"
        ],
        "operationId": "systemHealth",
        "x-mojo-name": "system_health",
        "x-mojo-to": "system#health",
        "responses": {
          "200": {
            "description": "Connection Broker load and component status.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemHealth"
                },
                "examples": {
                  "all_online": {
                    "$ref": "#/components/examples/AllOnline"
                  },
                  "only_enabled": {
                    "$ref": "#/components/examples/OnlyEnabled"
                  },
                  "high_loadavg": {
                    "$ref": "#/components/examples/HighLoadAverage"
                  },
                  "auth_fail": {
                    "$ref": "#/components/examples/AuthFailConnect"
                  },
                  "wq_off": {
                    "$ref": "#/components/examples/WorkQueueNotRunning"
                  },
                  "status_mix": {
                    "$ref": "#/components/examples/StatusMix"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "503": {
            "description": "Can't connect to one or more databases (internal, external, redis).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "summary": "users.insert",
        "description": "Add a user to the Connection Broker database. This user can be either a local user or a user\nfrom an authentication server\n",
        "tags": [
          "Users",
          "API inserts"
        ],
        "operationId": "userCreate",
        "x-mojo-name": "user_create",
        "x-mojo-to": "users#create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAdd"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The Create operation was successful.\n\nThe response contains a field 'stored_data', which contains an ID of created User object.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespUserCreated"
                },
                "examples": {
                  "user_created": {
                    "$ref": "#/components/examples/UserCreated"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/InsufficientPermissions"
          },
          "409": {
            "$ref": "#/components/responses/ExistsAlreadyUser"
          }
        }
      }
    }
  }
}